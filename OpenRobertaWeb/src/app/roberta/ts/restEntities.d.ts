/*
 * This is a Typescript d.ts file GENERATED by the CommBeanGenerator maven plugin.

 * DON'T MODIFY IT. Don't modify it. DON'T MODIFY IT.
 * Otherwise your effort may be lost: the file will be overwritten automatically
 * when the json-file, it is derived from, is changed.
 */
interface InitRequest {
    log?: string[];
    data?: any;
}
interface FullRestRequest {
    initToken?: string;
    log?: string[];
    data?: any;
}
interface BaseRequest {
    cmd?: string;
}
interface BaseResponse {
    cmd?: string;
    rc?: string;
    message?: string;
    cause?: string;
    parameters?: any;
    initToken?: string;
    serverTime?: number;
    serverVersion?: string;
    robotWait?: number;
    robotBattery?: string;
    robotName?: string;
    robotVersion?: string;
    robotFirmwareName?: string;
    robotSensorvalues?: any;
    robotNepoexitvalue?: number;
    robotState?: string;
    notificationsAvailable?: boolean;
}
interface InitResponse {
    server?: any;
}
interface RobotInfo {
    wait?: number;
    battery?: string;
    name?: string;
    version?: string;
    firmwareName?: string;
    sensorvalues?: any;
    nepoexitvalue?: number;
}
interface SaveRequest {
    timestamp?: number;
    programName?: string;
    progXML?: string;
    configName?: string;
    confXML?: string;
    ownerAccount?: string;
}
interface ShareCreateRequest {
    programName?: string;
}
interface SaveResponse {
    lastChanged?: number;
}
interface ShareDeleteRequest {
    programName?: string;
    owner?: string;
    author?: string;
}
interface ListingRequest {
    programName?: string;
    owner?: string;
    author?: string;
    configName?: string;
}
interface ListingResponse {
    programName?: string;
    progXML?: string;
    configName?: string;
    confXML?: string;
    lastChanged?: number;
}
interface ImportRequest {
    programName?: string;
    progXML?: string;
}
interface ImportResponse {
    programName?: string;
    progXML?: string;
    confXML?: string;
}
interface ImportErrorResponse {
    robotTypes?: string;
}
interface ShareRequest {
    programName?: string;
    shareData?: any;
}
interface ShareResponse {
    sharedWith?: any[];
}
interface LikeRequest {
    programName?: string;
    robotName?: string;
    author?: string;
    like?: boolean;
}
interface EntityRequest {
    programName?: string;
    owner?: string;
    author?: string;
    configName?: string;
}
interface EntityResponse {
    program?: any[];
}
interface ListingNamesResponse {
    programNames?: any[];
}
interface DeleteRequest {
    programName?: string;
    author?: string;
}
interface SetTokenRequest {
    token?: string;
}
interface SetTokenResponse {
    update?: number;
}
interface SetRobotRequest {
    robot?: string;
    extensions?: any;
}
interface SetRobotResponse {
    robot?: string;
    program?: any;
    configuration?: any;
    sim?: boolean;
    multipleSim?: boolean;
    markerSim?: boolean;
    nn?: boolean;
    nnActivations?: any[];
    webotsSim?: boolean;
    webotsUrl?: string;
    vendor?: string;
    configurationUsed?: boolean;
    commandLine?: string;
    signature?: string;
    sourceCodeFileExtension?: string;
    binaryFileExtension?: string;
    firmwareDefault?: string;
}
interface SaveConfRequest {
    name?: string;
    configuration?: string;
}
interface ConfRequest {
    name?: string;
    owner?: string;
}
interface ConfResponse {
    confXML?: string;
    configurationNames?: any[];
}
interface PingResponse {
    version?: string;
    date?: number;
    dateAsString?: string;
}
interface LoginRequest {
    accountName?: string;
    password?: string;
    userGroupOwner?: string;
    userGroupName?: string;
}
interface LoginResponse {
    userId?: number;
    userRole?: string;
    userAccountName?: string;
    userName?: string;
    isAccountActivated?: boolean;
    userGroupOwner?: string;
    userGroupName?: string;
}
interface GetUserResponse {
    userId?: number;
    userAccountName?: string;
    userName?: string;
    userEmail?: string;
    isYoungerThen14?: boolean;
}
interface UserRequest {
    accountName?: string;
    password?: string;
    userEmail?: string;
    userName?: string;
    role?: string;
    language?: string;
    isYoungerThen14?: boolean;
}
interface ChangePasswordRequest {
    accountName?: string;
    oldPassword?: string;
    newPassword?: string;
}
interface DeleteUserRequest {
    accountName?: string;
    password?: string;
}
interface ResetPasswordRequest {
    resetPasswordLink?: string;
    newPassword?: string;
}
interface IsResetPasswordLinkExpiredResponse {
    resetPasswordLinkExpired?: boolean;
}
interface PasswordRecoveryRequest {
    lostEmail?: string;
    language?: string;
}
interface ResendActivationRequest {
    accountName?: string;
    language?: string;
}
interface ActivateUserRequest {
    userActivationLink?: string;
}
interface GetStatusTextResponse {
    statustext?: any[];
}
interface SetStatusTextRequest {
    english?: string;
    german?: string;
    timestamp?: number;
}
interface ProjectWorkflowRequest {
    programName?: string;
    configurationName?: string;
    progXML?: string;
    confXML?: string;
    SSID?: string;
    password?: string;
    language?: string;
    robot?: string;
}
interface ProjectWorkflowResetRequest {
    robot?: string;
}
interface ProjectSourceResponse {
    sourceCode?: string;
    progXML?: string;
    confAnnos?: any;
}
interface ProjectSourceSimulationResponse {
    programName?: string;
    javaScriptProgram?: string;
    fileExtension?: string;
    progXML?: string;
    confAnnos?: any;
    configuration?: any;
}
interface ProjectNepoResponse {
    programName?: string;
    progXML?: string;
    confAnnos?: any;
    compiledCode?: string;
    configuration?: any;
}
interface ProjectNativeResponse {
    programName?: string;
    confAnnos?: any;
    compiledCode?: string;
}
interface UserGroupProgramListRequest {
    groupName?: string;
}
interface UserGroupRequest {
    groupName?: string;
}
interface UserGroupResponse {
    userGroup?: any;
}
interface UserGroupListResponse {
    userGroups?: any[];
}
interface ChangeUserGroupRequest {
    groupName?: string;
    groupMemberNames?: string[];
}
interface UpdateUserGroupMemberAccountRequest {
    groupName?: string;
    currentGroupMemberAccount?: string;
    newGroupMemberAccount?: string;
}
interface UserGroupsRequest {
    groupNames?: string[];
}
interface UserGroupMembersRequest {
    groupName?: string;
    groupMemberAccounts?: string[];
}
interface NotificationsResponse {
    notifications?: any;
}
