// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.en');

goog.require('Blockly.Msg');

Blockly.Msg.ABOUT = "about";
Blockly.Msg.ACCELERATION_TOOLTIP = "Get the acceleration value in milli-gravities.";
Blockly.Msg.ACCELEROMETER_ROTATION_TOOLTIP = "Get the tilt or rotations in degrees.";
Blockly.Msg.ACCELEROMETER_TOOLTIP = "Represents an accelerometer.";
Blockly.Msg.ACTION_ANALOGIN = "actuator analog";
Blockly.Msg.ACTION_BUZZER = "buzzer";
Blockly.Msg.ACTION_BUZZER_ARDUINO = "buzzer HYT120";
Blockly.Msg.ACTION_DIGITALIN = "actuator digital";
Blockly.Msg.ACTION_EVAL = "eval";
Blockly.Msg.ACTION_EVAL_AS = "as";
Blockly.Msg.ACTION_IN = "actuator";
Blockly.Msg.ACTION_INFRARED = "infrared emitter";
Blockly.Msg.ACTION_LCD = "LCD 1602";
Blockly.Msg.ACTION_LCDI2C = "LCD 1602 I²C";
Blockly.Msg.ACTION_LCDI2C_SENSEBOX = "OLED Display I²C";
Blockly.Msg.ACTION_LED = "LED";
Blockly.Msg.ACTION_MOTOR = "motor";
Blockly.Msg.ACTION_PLAY = "play";
Blockly.Msg.ACTION_PLOTTING = "plot";
Blockly.Msg.ACTION_PLOT_CLEAR = "clear the plot";
Blockly.Msg.ACTION_PLOT_CLEAR_TOOLTIP = "Removes all the data from the plot.";
Blockly.Msg.ACTION_PLOT_POINT = "plot a point on";
Blockly.Msg.ACTION_PLOT_POINT_TOOLTIP = "Plots a point with specified value (Y axis) at the specified tickmark (X axis).";
Blockly.Msg.ACTION_PLOT_TICKMARK = "at tickmark";
Blockly.Msg.ACTION_RELAY = "relay SRD-05VDC-SL-C";
Blockly.Msg.ACTION_RGBLED = "RGB LED";
Blockly.Msg.ACTION_SDCARD = "SD card";
Blockly.Msg.ACTION_SERIAL_PRINT = "show on Serial Monitor";
Blockly.Msg.ACTION_SERIAL_PRINT_TOOLTIP = "Show data on the Serial Monitor. You can find the Serial Monitor in the USB Programm on top, under View.";
Blockly.Msg.ACTION_SERVO = "servo motor";
Blockly.Msg.ACTION_SERVO_ARDUINO = "servo motor SG90";
Blockly.Msg.ACTION_STEPMOTOR = "step motor";
Blockly.Msg.ACTION_WIRELESS = "WiFi connection.";
Blockly.Msg.ACTIVITY_TOOLTIP = "Marker for an additional activity.";
Blockly.Msg.ACTOR_ANALOGIN_TOOLTIP = "Writes an analog value (PWM wave) to a pin. Only values between 0 and 255 should be used";
Blockly.Msg.ACTOR_DIGITALIN_TOOLTIP = "Writes a HIGH or a LOW value to a digital pin. Only the values HIGH »1« and LOW »0« should be used.";
Blockly.Msg.ACTOR_TOOLTIP = "Represents any actor.";
Blockly.Msg.ADDRESS = "address";
Blockly.Msg.ADD_COMMENT = "Add Comment";
Blockly.Msg.ANALOG = "analog";
Blockly.Msg.ANALOGIN_TOOLTIP = "Represents any actuator connected to an analog pin.";
Blockly.Msg.ANALOGOUT_TOOLTIP = "Represents any sensor connected to an analog pin.";
Blockly.Msg.AND = "and";
Blockly.Msg.ARDUBRICK_TOOLTIP = "Represents the Bot'n Roll board with connected actors and sensors. There are also inbuilt actors and sensors available, e.g. pushbuttons, display ...";
Blockly.Msg.AUTH = "Please authorize this app to enable your work to be saved and to allow it to be shared by you.";
Blockly.Msg.BATTERY_GETSAMPLE_TOOLTIP = "Gets the current voltage from the battery.";
Blockly.Msg.BELOW = "below";
Blockly.Msg.BLOCK_NOT_EXECUTED = "The exection of this block will have no effect!";
Blockly.Msg.BLOCK_NOT_SUPPORTED = "This robot does not support this block!";
Blockly.Msg.BLOCK_USED_INCORRECTLY = "Unfortunately, this block cannot be used in this way.";
Blockly.Msg.BOB3_READNUMBER_TOOLTIP = "Returns the previously stored number.";
Blockly.Msg.BOB3_RECALL_NUMBER = "recall number";
Blockly.Msg.BOB3_REMEMBER_NUMBER = "remember number";
Blockly.Msg.BOB3_SAVENUMBER_TOOLTIP = "The number to store should be an integer in the range of 0 to 255";
Blockly.Msg.BOTH = "both";
Blockly.Msg.BOX_ID = "Device ID";
Blockly.Msg.BRICKLIGHT = "brick light";
Blockly.Msg.BRICKLIGHT_BLUE = "blue";
Blockly.Msg.BRICKLIGHT_COLOR = "colour";
Blockly.Msg.BRICKLIGHT_DOUBLE_FLASH = "double flashing";
Blockly.Msg.BRICKLIGHT_FLASH = "flashing";
Blockly.Msg.BRICKLIGHT_GREEN = "green";
Blockly.Msg.BRICKLIGHT_OFF_TOOLTIP = "Turns bricklight off.";
Blockly.Msg.BRICKLIGHT_ON = "on";
Blockly.Msg.BRICKLIGHT_ON_TOOLTIP = "Turns bricklight on.";
Blockly.Msg.BRICKLIGHT_ORANGE = "orange";
Blockly.Msg.BRICKLIGHT_RED = "red";
Blockly.Msg.BRICKLIGHT_RESET_TOOLTIP = "Resets bricklight. Sets the default bricklight: green and blinking.";
Blockly.Msg.BRICKNAME_WEDO = "WeDo";
Blockly.Msg.BRICK_IPADDRESS = "ip address";
Blockly.Msg.BRICK_PASSWORD = "password";
Blockly.Msg.BRICK_PHENOMENON = "Phenomenon";
Blockly.Msg.BRICK_PORT = "port";
Blockly.Msg.BRICK_TRACK_WIDTH = "track width";
Blockly.Msg.BRICK_USERNAME = "user name";
Blockly.Msg.BRICK_WHEEL_DIAMETER = "wheel diameter";
Blockly.Msg.BRUSH_OFF = "turn brush Off";
Blockly.Msg.BRUSH_OFF_TOOLTIP = "Turns the brush off.";
Blockly.Msg.BRUSH_ON = "turn brush on (RPM)";
Blockly.Msg.BRUSH_ON_TOOLTIP = "Turns on the brush with RPM of the motor (0<=RPM<=10000)";
Blockly.Msg.BUTTON_DO_SHARE = "Share";
Blockly.Msg.BUTTON_DO_UPLOAD_GALLERY = "Upload »$« to the gallery";
Blockly.Msg.BUTTON_EMPTY_LIST = "Empty list";
Blockly.Msg.BUZZER_TOOLTIP = "Represents a buzzer.";
Blockly.Msg.CALLIOPEBRICK_TOOLTIP = "Represents Calliope, a pocket-sized codeable computer. There are also inbuilt actors and sensors available, e.g. buttons, display ...";
Blockly.Msg.CB_ALL = "Calli:bot all";
Blockly.Msg.CB_BOTH = "Calli:bot both";
Blockly.Msg.CB_LEFT = "Calli:bot left";
Blockly.Msg.CB_RIGHT = "Calli:bot right";
Blockly.Msg.CENTER = "center";
Blockly.Msg.CHANGE_VALUE_TITLE = "Change value:";
Blockly.Msg.CHAT = "Chat with your collaborator by typing in this box!";
Blockly.Msg.CLEAN_UP = "Clean up Blocks";
Blockly.Msg.CLEAR = "clear";
Blockly.Msg.COLLAPSE_ALL = "Collapse Blocks";
Blockly.Msg.COLLAPSE_BLOCK = "Collapse Block";
Blockly.Msg.COLON = "colon";
Blockly.Msg.COLOUR_AMBIENTLIGHT_GETSAMPLE_TOOLTIP = "Gets the current ambient light reading from the sensor.";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "colour 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "colour 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "ratio";
Blockly.Msg.COLOUR_BLEND_TITLE = "blend";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Blends two colours together with a given ratio (0.0 - 1.0).";
Blockly.Msg.COLOUR_COLOUR_GETSAMPLE_TOOLTIP = "Gets the current colour reading from the sensor.";
Blockly.Msg.COLOUR_GETSAMPLE_TOOLTIP = "Gets the current reading from the colour sensor.";
Blockly.Msg.COLOUR_LIGHT_GETSAMPLE_TOOLTIP = "Gets the current brightness reading from the sensor.";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Choose a colour from the palette.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";
Blockly.Msg.COLOUR_RANDOM_TITLE = "random colour";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Choose a colour at random.";
Blockly.Msg.COLOUR_RGB_BLUE = "blue";
Blockly.Msg.COLOUR_RGB_GETSAMPLE_TOOLTIP = "Gets the current colour reading from the colour sensor. Values are in the range 0 to 255.";
Blockly.Msg.COLOUR_RGB_GREEN = "green";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "red";
Blockly.Msg.COLOUR_RGB_TITLE = "colour with";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Creates a color with the given red, green, and blue values. Values should be between 0 and 255.";
Blockly.Msg.COLOUR_RGB_WHITE = "white";
Blockly.Msg.COLOUR_TOOLTIP = "Represents a colour sensor.";
Blockly.Msg.COMPASS_CALIBRATE_TOOLTIP = "Calibrates the compass. Turn the compass sensor VERY slowly for two times (about 40 seconds).";
Blockly.Msg.COMPASS_GETSAMPLE_TOOLTIP = "Gets the current reading from the compass sensor.";
Blockly.Msg.COMPASS_TOOLTIP = "Represents a compass sensor.";
Blockly.Msg.COMPASS_TOOLTIP_EV3 = "Represents a HiTechnic NXT compass sensor.";
Blockly.Msg.CONFIGURATION_ERROR_ACTOR_MISSING = "This actuator is not configured. Please add the corresponding block in the configuration tab!";
Blockly.Msg.CONFIGURATION_ERROR_MOTORS_ROTATION_DIRECTION = "The direction of rotation of the left and right motor is different!";
Blockly.Msg.CONFIGURATION_ERROR_MOTOR_LEFT_MISSING = "Left motor missing in the configuration!";
Blockly.Msg.CONFIGURATION_ERROR_MOTOR_LEFT_UNREGULATED = "Left motor is not regulated!";
Blockly.Msg.CONFIGURATION_ERROR_MOTOR_MISSING = "Motor is missing on the given port!";
Blockly.Msg.CONFIGURATION_ERROR_MOTOR_RIGHT_MISSING = "Right motor missing in the configuration!";
Blockly.Msg.CONFIGURATION_ERROR_MOTOR_RIGHT_UNREGULATED = "Right motor is not regulated!";
Blockly.Msg.CONFIGURATION_ERROR_MULTIPLE_LEFT_MOTORS = "You have multiple left motors assigned to your configuration!";
Blockly.Msg.CONFIGURATION_ERROR_MULTIPLE_RIGHT_MOTORS = "You have multiple right motors assigned to your configuration!";
Blockly.Msg.CONFIGURATION_ERROR_OTHER_NOT_SUPPORTED = "Other power consumer does not support this type of block!";
Blockly.Msg.CONFIGURATION_ERROR_OVERLAPPING_PORTS = "Another component is already using the same port!";
Blockly.Msg.CONFIGURATION_ERROR_SENSOR_MISSING = "This sensor is not configured. Please add the corresponding block in the configuration tab!";
Blockly.Msg.CONFIGURATION_ERROR_SENSOR_WRONG = "Connected wrong sensor to the given port!";
Blockly.Msg.CONFIGURATION_ERROR_WLAN_CREDENTIALS_MISSING = "Missing WLAN credentials, please enter them in robot -> WLAN credentials ... !";
Blockly.Msg.CONFIGURATION_ERROR_WLAN_MISSING = "WiFi is not configured. Please add the corresponding block in the configuration tab!";
Blockly.Msg.CONFIGURATION_NO_PHENOMENON = "no phenomenon";
Blockly.Msg.CONFIGURATION_NO_PORT = "no port";
Blockly.Msg.CONFIGURATION_PORT = "Port1";
Blockly.Msg.CONFLIST_DELETE_ALL_TOOLTIP = "Click here to delete all selected programs.";
Blockly.Msg.CONFLIST_DELETE_TOOLTIP = "Click here to delete your robot configuration.";
Blockly.Msg.CONFLIST_LOAD_TOOLTIP = "Click here to load your robot configuration in the configuration environment.";
Blockly.Msg.CONNECTION_CHECK = "connection to robot %1 active?";
Blockly.Msg.CONNECTION_CHECK_TOOLTIP = "Check if the connection to the robot is active.";
Blockly.Msg.CONNECTION_CONNECT = "connect to robot name";
Blockly.Msg.CONNECTION_FROM_CONNECTION = "from connection";
Blockly.Msg.CONNECTION_FROM_ROBOT = "from robot";
Blockly.Msg.CONNECTION_MBED_RECEIVE_TOOLTIP = "Reads a message over one of the channels (0 - 255). The default channel is 0.";
Blockly.Msg.CONNECTION_MBED_SEND_TOOLTIP = "Sends a message to another system. You can specify a signal strength from 0 - 7, where 0 is very low and 7 is the strongests. The message is send over channel 0 unless you specify another one.";
Blockly.Msg.CONNECTION_OVER_CHANNEL = "over channel";
Blockly.Msg.CONNECTION_POWER = "with strength";
Blockly.Msg.CONNECTION_PROTOCOL_BLUETOOTH = "Bluetooth";
Blockly.Msg.CONNECTION_RECEIVED_DATA = "receive message";
Blockly.Msg.CONNECTION_RECEIVE_TOOLTIP = "Waits for a message from the robot which you declare in the connection.";
Blockly.Msg.CONNECTION_RECEIVE_TOOLTIP_BOB3 = "Reads a message via the IR receiver. Only numbers can be received.";
Blockly.Msg.CONNECTION_RECEIVE_TOOLTIP_MBOT = "Reads a message from the IR receiver. Only strings can be received.";
Blockly.Msg.CONNECTION_SEND_DATA = "send message";
Blockly.Msg.CONNECTION_SEND_TOOLTIP = "Sends a message to another robot.";
Blockly.Msg.CONNECTION_SEND_TOOLTIP_BOB3 = "Sends a message of type number to another Bob3. Hold the Bob3's face to face!";
Blockly.Msg.CONNECTION_SEND_TOOLTIP_MBOT = "Sends a message of type string to another mBot. Hold the mBots's face to face!";
Blockly.Msg.CONNECTION_SET_CHANNEL = "set channel to %1";
Blockly.Msg.CONNECTION_SET_CHANNEL_TOOLTIP = "Sets the channel for sending and receiving messages. Can be set from 0 to 255.";
Blockly.Msg.CONNECTION_START_TOOLTIP = "Tries to make a connection to another robot via Bluetooth.";
Blockly.Msg.CONNECTION_TOOLTIP = "A robot's connection";
Blockly.Msg.CONNECTION_TO_CONNECTION = "to connection";
Blockly.Msg.CONNECTION_TO_ROBOT = "to robot";
Blockly.Msg.CONNECTION_WAIT_FOR_CONNECTION = "wait for connection";
Blockly.Msg.CONNECTION_WAIT_TOOLTIP = "Waits for a connection via Bluetooth.";
Blockly.Msg.CONNECTOR = "hub";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "break out of loop";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "continue with next iteration of loop";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Break out of the containing loop.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Skip the rest of this loop, and continue with the next iteration.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Warning: This block may only be used within a loop.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";
Blockly.Msg.CONTROLS_FOREACH_TITLE = "for each item %1 in list %2";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";
Blockly.Msg.CONTROLS_FOR_TITLE = "count with %1 from %2 while counter < %3 by %4";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Have the variable '%1' take on the values from the start number as long as it is less than the end number, counting by the specified interval, and do the specified blocks.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Add a condition to the if block.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Add a final, catch-all condition to the if block.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Add, remove, or reorder sections to reconfigure this if block.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "else";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "else if";
Blockly.Msg.CONTROLS_IF_MSG_IF = "if";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "If a value is true, then do some statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "do";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "repeat %1 times";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Do some statements several times.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repeat until";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "repeat while";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "While a value is false, then do some statements.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "While a value is true, then do some statements.";
Blockly.Msg.DATATABLE_ACTUALIZATION = "Modification date";
Blockly.Msg.DATATABLE_CONFIGURATIONS = "configurations";
Blockly.Msg.DATATABLE_CONFIGURATION_NAME = "Configuration name";
Blockly.Msg.DATATABLE_CREATED_BY = "Creator";
Blockly.Msg.DATATABLE_CREATED_ON = "Creation date";
Blockly.Msg.DATATABLE_MEMBERS = "members";
Blockly.Msg.DATATABLE_PROGRAMS = "programs";
Blockly.Msg.DATATABLE_PROGRAM_NAME = "Program name";
Blockly.Msg.DATATABLE_SHARED = "Shared";
Blockly.Msg.DATATABLE_SHARED_PROGRAMS = "shared programs";
Blockly.Msg.DATATABLE_SHARED_WITH = "Shared with";
Blockly.Msg.DATATABLE_USERGROUP = "user group";
Blockly.Msg.DATATABLE_USERGROUPS = "user groups";
Blockly.Msg.DATATABLE_USERGROUP_NAME = "Name of the user group";
Blockly.Msg.DATATABLE_USERGROUP_NAME_CREATE_HINT = "The name of the user group. Kepp in mind, that the members will have to type it in each time they log in.";
Blockly.Msg.DATATABLE_USERGROUP_OWNER = "Name of the owner of the user group";
Blockly.Msg.DELETE_ALL_BLOCKS = "Delete all %1 blocks?";
Blockly.Msg.DELETE_BLOCK = "Delete Block";
Blockly.Msg.DELETE_USERGROUP_MEMBER_AFTER_LOGIN_WARNING = "A member you want to delete did already log in and might have create own programs. Are you sure that you want to delete the selected member(s)?";
Blockly.Msg.DELETE_USERGROUP_MEMBER_WARNING = "Are you sure that you want to delete the selected member(s)?";
Blockly.Msg.DELETE_X_BLOCKS = "Delete %1 Blocks";
Blockly.Msg.DIGITAL = "digital";
Blockly.Msg.DIGITALIN_TOOLTIP = "Represents any actuator connected to a digital pin.";
Blockly.Msg.DIGITALOUT_TOOLTIP = "Represents any sensor connected to a digital.";
Blockly.Msg.DISABLE_BLOCK = "Disable Block";
Blockly.Msg.DISPLAY_ANIMATION = "animation";
Blockly.Msg.DISPLAY_CHARACTER = "character";
Blockly.Msg.DISPLAY_CLEAR = "clear display";
Blockly.Msg.DISPLAY_CLEAR_TOOLTIP = "Clears the display.";
Blockly.Msg.DISPLAY_COL = "in column";
Blockly.Msg.DISPLAY_GET_BRIGHTNESS_TOOLTIP = "Returns the brightness for all leds of the display. 0 means all leds are turned off, 9 is the brightest value.";
Blockly.Msg.DISPLAY_GET_PIXEL_TOOLTIP = "Returns the brightness for this led. 0 means the led is turned off, 9 is the brightest value.";
Blockly.Msg.DISPLAY_IMAGE = "image";
Blockly.Msg.DISPLAY_PICTURE = "picture";
Blockly.Msg.DISPLAY_PICTURE_EYES_CLOSED = "eyes closed";
Blockly.Msg.DISPLAY_PICTURE_EYES_OPEN = "eyes open";
Blockly.Msg.DISPLAY_PICTURE_FLOWERS = "flowers";
Blockly.Msg.DISPLAY_PICTURE_GLASSES = "glasses";
Blockly.Msg.DISPLAY_PICTURE_TACHO = "speedo";
Blockly.Msg.DISPLAY_PICTURE_TOOLTIP = "Displays a picture on the screen.";
Blockly.Msg.DISPLAY_PIXEL_BRIGHTNESS = "brightness";
Blockly.Msg.DISPLAY_PIXEL_TITLE = "LED";
Blockly.Msg.DISPLAY_ROW = "in row";
Blockly.Msg.DISPLAY_SET_BRIGHTNESS_TOOLTIP = "Sets the brightness for all leds of the display. 0 means all leds are turned off, 9 is the brightest value.";
Blockly.Msg.DISPLAY_SET_PIXEL_TOOLTIP = "Sets the brightness for this led. 0 means the led is turned off, 9 is the brightest value. With x and y you can determine the position of the led you would like to change.";
Blockly.Msg.DISPLAY_SHOW = "show";
Blockly.Msg.DISPLAY_TEXT = "text";
Blockly.Msg.DISPLAY_TEXT_TOOLTIP = "Displays a text on the screen.";
Blockly.Msg.DROP_TOOLTIP = "Represents a drop sensor.";
Blockly.Msg.DUPLICATE_BLOCK = "Duplicate";
Blockly.Msg.ENABLE_BLOCK = "Enable Block";
Blockly.Msg.ENCODER_GETSAMPLE_TOOLTIP = "Gets the current reading from the motor encoder.";
Blockly.Msg.ENCODER_RESET_TOOLTIP = "Resets the motor encoder.";
Blockly.Msg.ENCODER_TOOLTIP = "Represents an encoder.";
Blockly.Msg.ERROR_MISSING_PARAMETER = "An input value is missing!";
Blockly.Msg.ERROR_MISSING_RETURN = "The function return value is missing!";
Blockly.Msg.EV3BRICK_TOOLTIP = "Represents the EV3 brick with connected actors and sensors. There are also inbuilt actors and sensors available, e.g. buttons, display ...";
Blockly.Msg.EXPAND_ALL = "Expand Blocks";
Blockly.Msg.EXPAND_BLOCK = "Expand Block";
Blockly.Msg.EXTERNAL_INPUTS = "External Inputs";
Blockly.Msg.FLAME_GETSAMPLE_TOOLTIP = "Gets the current reading from the flame sensor.";
Blockly.Msg.FLAME_TOOLTIP = "Represents a flame sensor.";
Blockly.Msg.FLYOUT_VARIABLE_TEXT = "You need a variable? Please declare it first with a click on the + sign at the »start« block.";
Blockly.Msg.FOR = "for";
Blockly.Msg.FOURDIGITDISPLAY = "4-Digit Display";
Blockly.Msg.FOURDIGITDISPLAY_CLEAR_TOOLTIP = "Clears the 4-Digit Display.";
Blockly.Msg.FOURDIGITDISPLAY_SHOW_TOOLTIP = "Displays a number [0-9999] on the 4-Digit Display. Position [0-3] represents the starting position of the number";
Blockly.Msg.FOURDIGITDISPLAY_TOOLTIP = "Represents a Grove 4-Digit Display by Seeed";
Blockly.Msg.FROM_POSITION = "from position";
Blockly.Msg.FSR_TOOLTIP = "Get the current reading from the force sensitive resistor under the feet of the robot.";
Blockly.Msg.GALLERY_BY = "by";
Blockly.Msg.GALLERY_DATE = "created";
Blockly.Msg.GALLERY_DISLIKE = "dislike";
Blockly.Msg.GALLERY_LIKE = "like";
Blockly.Msg.GALLERY_SHARED_ALREADY = "You have already uploaded this program to the gallery. If you want to change it, look for the copy from the gallery and modify it. You can also remove it from the gallery while deleting the copy from the gallery.";
Blockly.Msg.GEARED_MOTOR = "geared motor";
Blockly.Msg.GET = "get";
Blockly.Msg.GETSAMPLE_TOOLTIP = "Gets the current reading from chosen sensor.";
Blockly.Msg.GET_CODE_TOOLTIP = "Returns the value of the solderable code pad in the head piece. Values are in range 0-31.";
Blockly.Msg.GO_TO_GROUPS = "Go to groups";
Blockly.Msg.GPS_TOOLTIP = "Represents a GPS receiver.";
Blockly.Msg.GROUP_CREATE_NAME_HINT = "Please keep in mind, that all members of a group have to enter the group name on each login. It should neither be complicated nor long.";
Blockly.Msg.GYRO_GETSAMPLE_TOOLTIP = "Gets the current reading from the gyro sensor.";
Blockly.Msg.GYRO_RESET_TOOLTIP = "Resets the gyro sensor.";
Blockly.Msg.GYRO_TOOLTIP = "Represents a gyro sensor.";
Blockly.Msg.GYRO_TOOLTIP_WEDO = "Represents a tilt sensor.";
Blockly.Msg.HELP = "Help";
Blockly.Msg.HINT_USERGROUP_MEMBER = "Enter the member id of your user here. It should be a two digit number.";
Blockly.Msg.HINT_USERGROUP_OWNER = "Do <strong>not</strong> enter the real name of the owner of the user group here, but his <strong>username</strong> instead.";
Blockly.Msg.HINT_USER_ACCOUNT = "»IAmBotman« or »RobellaStracciatella«? Not everyone needs to know your real name. Think of a cool nickname that you can easily remember.";
Blockly.Msg.HINT_USER_AGE = "Are you under 16? Then please ask your parents to help you. They can specify their e-mail address to confirm your account.";
Blockly.Msg.HINT_USER_EMAIL = "This is voluntary! However, some functions of the lab are only available if you have verified your account by e-mail. You are younger than 16? Please ask your parents to help you out with one of their e-mail addresses. <br><a href='https://www.roberta-home.de/index.php?id=138&L=1' target='_blank'>Further information ...</a>";
Blockly.Msg.HINT_USER_NAME = "Enter your real name here if you like. This is just for you, no one else will see it.";
Blockly.Msg.HINT_USER_PASSWORT = "12345 is no secure password. Rather think of a safe combination of numbers and letters that you will not forget.";
Blockly.Msg.HINT_USER_PASSWORT_CONFIRM = "Got it? Better make sure!";
Blockly.Msg.HTCOLOUR_TOOLTIP = "Represents a HiTechnic NXT Color Sensor V2.";
Blockly.Msg.HUMIDITY_TOOLTIP = "Represents a humidity sensor.";
Blockly.Msg.ICON_BLOCKING_TOOLTIP = "Blocking block! This blocks needs some time to be executed, so other's have to wait until it gives back the control to the caller function.";
Blockly.Msg.ID = "ID";
Blockly.Msg.IF_TOOLTIP = "Checks the condition in »if«. If the condition is true, executes the »do« action.";
Blockly.Msg.IMAGE_GET_TOOLTIP = "Returns the chosen image.";
Blockly.Msg.IMAGE_GET_TOOLTIP_ANGRY = "angry";
Blockly.Msg.IMAGE_GET_TOOLTIP_ASLEEP = "asleep";
Blockly.Msg.IMAGE_GET_TOOLTIP_BUTTERFLY = "butterfly";
Blockly.Msg.IMAGE_GET_TOOLTIP_CHESSBOARD = "chessboard";
Blockly.Msg.IMAGE_GET_TOOLTIP_CONFUSED = "confused";
Blockly.Msg.IMAGE_GET_TOOLTIP_COW = "cow";
Blockly.Msg.IMAGE_GET_TOOLTIP_DIAMOND = "diamond";
Blockly.Msg.IMAGE_GET_TOOLTIP_DIAMOND_SMALL = "small diamond";
Blockly.Msg.IMAGE_GET_TOOLTIP_DUCK = "duck";
Blockly.Msg.IMAGE_GET_TOOLTIP_FABULOUS = "fabulous";
Blockly.Msg.IMAGE_GET_TOOLTIP_GHOST = "ghost";
Blockly.Msg.IMAGE_GET_TOOLTIP_GIRAFFE = "giraffe";
Blockly.Msg.IMAGE_GET_TOOLTIP_HEART = "heart";
Blockly.Msg.IMAGE_GET_TOOLTIP_HEART_SMALL = "small heart";
Blockly.Msg.IMAGE_GET_TOOLTIP_HOUSE = "house";
Blockly.Msg.IMAGE_GET_TOOLTIP_MEH = "meh!";
Blockly.Msg.IMAGE_GET_TOOLTIP_MUSIC_CROTCHET = "music crotchet";
Blockly.Msg.IMAGE_GET_TOOLTIP_MUSIC_QUAVER = "music quaver";
Blockly.Msg.IMAGE_GET_TOOLTIP_MUSIC_QUAVERS = "music quavers";
Blockly.Msg.IMAGE_GET_TOOLTIP_NO = "no";
Blockly.Msg.IMAGE_GET_TOOLTIP_PACMAN = "pacman";
Blockly.Msg.IMAGE_GET_TOOLTIP_PITCHFORK = "pitchfork";
Blockly.Msg.IMAGE_GET_TOOLTIP_RABBIT = "rabbit";
Blockly.Msg.IMAGE_GET_TOOLTIP_ROLLERSKATE = "rollerskate";
Blockly.Msg.IMAGE_GET_TOOLTIP_SAD = "sad";
Blockly.Msg.IMAGE_GET_TOOLTIP_SILLY = "silly";
Blockly.Msg.IMAGE_GET_TOOLTIP_SKULL = "skull";
Blockly.Msg.IMAGE_GET_TOOLTIP_SMILE = "smile";
Blockly.Msg.IMAGE_GET_TOOLTIP_SNAKE = "snake";
Blockly.Msg.IMAGE_GET_TOOLTIP_SQUARE = "square";
Blockly.Msg.IMAGE_GET_TOOLTIP_SQUARE_SMALL = "small square";
Blockly.Msg.IMAGE_GET_TOOLTIP_STICKFIGURE = "stickfigure";
Blockly.Msg.IMAGE_GET_TOOLTIP_SWORD = "sword";
Blockly.Msg.IMAGE_GET_TOOLTIP_TARGET = "target";
Blockly.Msg.IMAGE_GET_TOOLTIP_TORTOISE = "tortoise";
Blockly.Msg.IMAGE_GET_TOOLTIP_TRIANGLE = "triangle";
Blockly.Msg.IMAGE_GET_TOOLTIP_TRIANGLE_LEFT = "triangle left";
Blockly.Msg.IMAGE_GET_TOOLTIP_TSHIRT = "T-shirt";
Blockly.Msg.IMAGE_GET_TOOLTIP_UMBRELLA = "umbrella";
Blockly.Msg.IMAGE_GET_TOOLTIP_XMAS = "xmas";
Blockly.Msg.IMAGE_GET_TOOLTIP_YES = "yes";
Blockly.Msg.IMAGE_INVERT = "invert";
Blockly.Msg.IMAGE_INVERT_TOOLTIP = "Inverts the image. Each pixel with value 0 or none will be set to # or 9 and pixels with value # or 9 will be set to 0 or none.";
Blockly.Msg.IMAGE_SHIFT = "shift";
Blockly.Msg.IMAGE_SHIFT_TOOLTIP = "Shifts the image in the given direction by the given number";
Blockly.Msg.IMAGE_TOOLTIP = "Creates an image for the display. You can specify the brightness of each pixel from 0 to 9 or # where 0 means no light, 1 is a bit bright and 9 or # is the brightest value.";
Blockly.Msg.INFO_DOCUMENTATION_HINT = "Document your program here ...";
Blockly.Msg.INFO_TAGS = "Tags";
Blockly.Msg.INFRARED_DISTANCE_GETSAMPLE_TOOLTIP = "Gets the current relative distance from the infrared sensor. The values are between 1 and 75 cm.";
Blockly.Msg.INFRARED_GETSAMPLE_TOOLTIP = "Gets the current reading from the infrared sensor.";
Blockly.Msg.INFRARED_GETSAMPLE_TOOLTIP_MBOT = "Gets the current reading from the light sensor -- if a black line is detected (true/false).";
Blockly.Msg.INFRARED_PRESENCE_GETSAMPLE_TOOLTIP = "Returns an array of measurements for the presence of a beacon.";
Blockly.Msg.INFRARED_TOOLTIP = "Represents an infrared sensor.";
Blockly.Msg.INLINE_INPUTS = "Inline Inputs";
Blockly.Msg.INPUT = "input";
Blockly.Msg.INTERNAL_PORT = "internal";
Blockly.Msg.IRSEEKER_TOOLTIP = "Represents a HiTechnic NXT IRSeeker V2 sensor.";
Blockly.Msg.JOYSTICK_GETSAMPLE_TOOLTIP = "Gets the current reading of one of the axises of the joystick";
Blockly.Msg.KEY_ISPRESSED_TOOLTIP = "Is the selected button pressed?";
Blockly.Msg.KEY_TOOLTIP = "Represents a button.";
Blockly.Msg.LANGUAGE = "language";
Blockly.Msg.LANGUAGE_ARABIC = "Arabic";
Blockly.Msg.LANGUAGE_BRAZILIAN = "Brazilian";
Blockly.Msg.LANGUAGE_CHINESE = "Chinese";
Blockly.Msg.LANGUAGE_CZECH = "Czech";
Blockly.Msg.LANGUAGE_DANISH = "Danish";
Blockly.Msg.LANGUAGE_DUTCH = "Dutch";
Blockly.Msg.LANGUAGE_ENGLISH = "English";
Blockly.Msg.LANGUAGE_FINNISH = "Finnish";
Blockly.Msg.LANGUAGE_FRENCH = "French";
Blockly.Msg.LANGUAGE_GERMAN = "German";
Blockly.Msg.LANGUAGE_GREEK = "Greek";
Blockly.Msg.LANGUAGE_ITALIAN = "Italian";
Blockly.Msg.LANGUAGE_JAPANESE = "Japanese";
Blockly.Msg.LANGUAGE_KOREAN = "Korean";
Blockly.Msg.LANGUAGE_NORWEGIAN = "Norwegian";
Blockly.Msg.LANGUAGE_POLISH = "Polish";
Blockly.Msg.LANGUAGE_PORTUGUESE = "Portuguese";
Blockly.Msg.LANGUAGE_RUSSIAN = "Russian";
Blockly.Msg.LANGUAGE_SPANISH = "Spanish";
Blockly.Msg.LANGUAGE_SWEDISH = "Swedish";
Blockly.Msg.LANGUAGE_TURKISH = "Turkish";
Blockly.Msg.LCDI2C_TOOLTIP = "Represents an LCD 1602 display with a soldered I²C module.";
Blockly.Msg.LCD_TOOLTIP = "Represents an LCD display.";
Blockly.Msg.LED = "LED";
Blockly.Msg.LEDBAR = "LED Bar";
Blockly.Msg.LEDBAR_SET_TOOLTIP = "Sets the specified LED [0-9] on the LED Bar to the given brightness [0-8].";
Blockly.Msg.LEDBAR_TOOLTIP = "Represents a Grove LED Bar v2.0 by Seeed.";
Blockly.Msg.LED_MATRIX = "LED matrix";
Blockly.Msg.LED_OFF = "turn LED off";
Blockly.Msg.LED_OFF_TOOLTIP = "Turns the LED off.";
Blockly.Msg.LED_ON = "turn LED on";
Blockly.Msg.LED_ON_TOOLTIP = "Turns the LED on and changes the color.";
Blockly.Msg.LED_ON_TOOLTIP_CB = "Turns the LED on and changes the color. Attention: calli:Bot only supports 7 different colors, the nearest will be chosen.";
Blockly.Msg.LED_ON_TOOLTIP_EDISON = "Turns the LED on.";
Blockly.Msg.LED_ON_WHITE_TOOLTIP = "Turns the LED on. Watch out, it's very bright!";
Blockly.Msg.LED_TOOLTIP = "Represents an LED.";
Blockly.Msg.LEFT = "left";
Blockly.Msg.LIGHTVEML_TOOLTIP = "Represents a visible/UV light sensor.";
Blockly.Msg.LIGHT_ARDU_TOOLTIP = "Represents 8 light sensors.";
Blockly.Msg.LIGHT_GETSAMPLE_TOOLTIP = "Gets the current reading from the light sensor in percent.";
Blockly.Msg.LIGHT_TOOLTIP = "Represents a light sensor.";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "create empty list";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Returns a list, of length 0, containing no data records";
Blockly.Msg.LISTS_CREATE_TITLE = "list";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "list";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this list block.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "create list with";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Add an item to the list.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Create a list with any number of items.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "first";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# from end";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_GET = "get";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "get and remove";
Blockly.Msg.LISTS_GET_INDEX_LAST = "last";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "random";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "remove";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Returns the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Returns the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Returns the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Returns the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Returns a random item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Removes and returns the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Removes and returns the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Removes and returns the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Removes and returns the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Removes and returns a random item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Removes the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Removes the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Removes the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Removes the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Removes a random item in a list.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "to # from end";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "to #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "to last";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "get sub-list from first";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "get sub-list from # from end";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "get sub-list from #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Creates a copy of the specified portion of a list.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "find first occurrence of item";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg.LISTS_INDEX_OF_LAST = "find last occurrence of item";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Returns the index of the first/last occurrence of the item in the list. Returns -1 if item is not found.";
Blockly.Msg.LISTS_INLIST = "in list";
Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 is empty";
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Returns true if the list is empty.";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg.LISTS_LENGTH_TITLE = "length of %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Returns the length of a list.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_REPEAT_TITLE = "create list with item %1 repeated %2 times";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Creates a list consisting of the given value repeated the specified number of times.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "as";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "insert at";
Blockly.Msg.LISTS_SET_INDEX_SET = "set";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserts the item at the start of a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Inserts the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Inserts the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Append the item to the end of a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserts the item randomly in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Sets the first item in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Sets the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Sets the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Sets the last item in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Sets a random item in a list.";
Blockly.Msg.LISTS_SORT_HELPURL = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = "ascending";
Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = "descending";
Blockly.Msg.LISTS_SORT_TITLE = "sort %1 %2 %3";
Blockly.Msg.LISTS_SORT_TOOLTIP = "Sort a copy of a list.";
Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = "alphabetic, ignore case";
Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = "numeric";
Blockly.Msg.LISTS_SORT_TYPE_TEXT = "alphabetic";
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "make list from text";
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "make text from list";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Join a list of texts into one text, separated by a delimiter.";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Split text into a list of texts, breaking at each delimiter.";
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "with delimiter";
Blockly.Msg.LIST_BACK_TOOLTIP = "Back to previous view.";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "false";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Returns either true or false.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "true";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Return true if both inputs equal each other.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Return true if the first input is greater than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Return true if the first input is greater than or equal to the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Return true if the first input is smaller than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Return true if the first input is smaller than or equal to the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Return true if both inputs are not equal to each other.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg.LOGIC_NEGATE_TITLE = "not %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Returns true if the input is false. Returns false if the input is true.";
Blockly.Msg.LOGIC_NULL = "null";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Returns null.";
Blockly.Msg.LOGIC_OPERATION_AND = "and";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";
Blockly.Msg.LOGIC_OPERATION_OR = "or";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Return true if both inputs are true.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Return true if at least one of the inputs is true.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "if false";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "if true";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
Blockly.Msg.LOOP = "repeat until";
Blockly.Msg.LOOPFOREVER_TOOLTIP = "Repeats indefinitely an action.";
Blockly.Msg.LOOP_FOREVER = "repeat indefinitely";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Return the sum of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Return the quotient of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Return the difference of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Return the product of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Return the first number raised to the power of the second number.";
Blockly.Msg.MATH_CAST_TOCHAR = "cast %1 to Char";
Blockly.Msg.MATH_CAST_TOCHAR_TOOLTIP = "Convert this number into a single ASCII character";
Blockly.Msg.MATH_CAST_TOSTRING = "cast %1 to String";
Blockly.Msg.MATH_CAST_TOSTRING_TOOLTIP = "Convert this number into a string.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_TITLE = "change %1 by %2";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Add a number to variable '%1'.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "constrain %1 low %2 high %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Constrain a number to be between the specified limits (inclusive).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "is divisible by";
Blockly.Msg.MATH_IS_EVEN = "is even";
Blockly.Msg.MATH_IS_NEGATIVE = "is negative";
Blockly.Msg.MATH_IS_ODD = "is odd";
Blockly.Msg.MATH_IS_POSITIVE = "is positive";
Blockly.Msg.MATH_IS_PRIME = "is prime";
Blockly.Msg.MATH_IS_TOOLTIP = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";
Blockly.Msg.MATH_IS_WHOLE = "is whole";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_TITLE = "remainder of %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Return the remainder from dividing the two numbers.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
Blockly.Msg.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "A number.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "average of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "max of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "median of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "min of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "modes of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "random item of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "standard deviation of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "sum of list";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Return the average (arithmetic mean) of the numeric values in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Return the largest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Return the median number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Return the smallest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Return a list of the most common item(s) in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Return a random element from the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Return the standard deviation of the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Return the sum of all the numbers in the list.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "random fraction";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "random integer from %1 to %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Return a random integer between the two specified limits, inclusive.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "round";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "round down";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "round up";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Round a number up or down.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absolute";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "square root";
Blockly.Msg.MATH_SINGLE_OP_SQUARE = "square";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Return the absolute value of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Return e to the power of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Return the natural logarithm of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Return the base 10 logarithm of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Return the negation of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Return 10 to the power of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Return the square root of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_SQUARE = "Return the number multiplied by itself.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_TRIG_ACOS = "acos";
Blockly.Msg.MATH_TRIG_ASIN = "asin";
Blockly.Msg.MATH_TRIG_ATAN = "atan";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg.MATH_TRIG_SIN = "sin";
Blockly.Msg.MATH_TRIG_TAN = "tan";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Return the arccosine of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Return the arcsine of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Return the arctangent of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Return the cosine of a degree (not radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Return the sine of a degree (not radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Return the tangent of a degree (not radian).";
Blockly.Msg.ME = "Me";
Blockly.Msg.MENU_ABOUT = "about the Open Roberta Lab";
Blockly.Msg.MENU_ABOUT_PROJECT = "about the Open Roberta Project";
Blockly.Msg.MENU_ATTACH = "attach ...";
Blockly.Msg.MENU_BEGINNER = "beginner";
Blockly.Msg.MENU_CHANGE = "change ...";
Blockly.Msg.MENU_CHECK = "check";
Blockly.Msg.MENU_CODE_DOWNLOAD_TOOLTIP = "Download the source code of your program on the computer";
Blockly.Msg.MENU_CODE_REFRESH_TOOLTIP = "Refresh the source code, if you have changed the NEPO Blocks.";
Blockly.Msg.MENU_CONNECT = "connect ...";
Blockly.Msg.MENU_CREATE_LINK = "create program link ...";
Blockly.Msg.MENU_DEBUG_START_TOOLTIP = "Enter Debugging Mode.";
Blockly.Msg.MENU_DEBUG_STEP_BREAKPOINT_TOOLTIP = "Step forward to the next breakpoint in the program.";
Blockly.Msg.MENU_DEBUG_STEP_INTO_TOOLTIP = "Step Into to the next block in the program.";
Blockly.Msg.MENU_DEBUG_STEP_OVER_TOOLTIP = "Step Over to the next block in the program.";
Blockly.Msg.MENU_DEBUG_STOP_TOOLTIP = "Exit Debugging Mode.";
Blockly.Msg.MENU_DELETE_USER = "delete user ...";
Blockly.Msg.MENU_EDIT = "edit";
Blockly.Msg.MENU_EDIT_TOOLTIP = "edit";
Blockly.Msg.MENU_EV3 = "Robot preparation";
Blockly.Msg.MENU_EXPERT = "expert";
Blockly.Msg.MENU_EXPORT_PROG = "export program";
Blockly.Msg.MENU_FAQ = "FAQ";
Blockly.Msg.MENU_GALLERY = "gallery";
Blockly.Msg.MENU_GALLERY_TOOLTIP = "gallery";
Blockly.Msg.MENU_GENERAL = "general help";
Blockly.Msg.MENU_HELP = "help";
Blockly.Msg.MENU_HELP_TOOLTIP = "help";
Blockly.Msg.MENU_IMPORT_PROG = "import program ...";
Blockly.Msg.MENU_LANGUAGE = "languages";
Blockly.Msg.MENU_LANGUAGE_TOOLTIP = "languages";
Blockly.Msg.MENU_LIST = "list ...";
Blockly.Msg.MENU_LIST_CONF = "my configurations ...";
Blockly.Msg.MENU_LIST_PROG = "my programs ...";
Blockly.Msg.MENU_LIST_PROG_EXAMPLES = "example programs ...";
Blockly.Msg.MENU_LOGGING = "logging";
Blockly.Msg.MENU_LOG_IN = "login ...";
Blockly.Msg.MENU_LOG_OUT = "logout";
Blockly.Msg.MENU_MANAGE_USERGROUPS = "Manage user groups ...";
Blockly.Msg.MENU_MESSAGE_DOWNLOAD = "Your program has been successfully downloaded.";
Blockly.Msg.MENU_NEW = "new";
Blockly.Msg.MENU_PROGRAMMING = "programming with NEPO";
Blockly.Msg.MENU_PROPERTIES = "properties";
Blockly.Msg.MENU_RESET_FIRMWARE = "reset to factory defaults";
Blockly.Msg.MENU_RIGHT_CODE_TOOLTIP = "Open/close the source code view.";
Blockly.Msg.MENU_RIGHT_HELP_TOOLTIP = "Open/close the help view.";
Blockly.Msg.MENU_RIGHT_INFO_TOOLTIP = "Open/close the program documentation view.";
Blockly.Msg.MENU_RIGHT_LEGAL_TOOLTIP = "Open/close the legal information view.";
Blockly.Msg.MENU_RIGHT_SIM_TOOLTIP = "Open/close the simulation view.";
Blockly.Msg.MENU_RIGHT_TUTORIAL_TOOLTIP = "open/close the tutorial's view";
Blockly.Msg.MENU_ROBOT = "robot";
Blockly.Msg.MENU_ROBOT_STATE_INFO = "info";
Blockly.Msg.MENU_ROBOT_STATE_TOOLTIP = "robot info";
Blockly.Msg.MENU_ROBOT_STOP_HINT_EV3 = "Press <span class='typcn typcn-media-stop'></span>+<span class='typcn typcn-arrow-sorted-down'></span> buttons on the robot to abort the program!";
Blockly.Msg.MENU_ROBOT_STOP_HINT_NXT = "Press <span class='typcn typcn-media-cancel'></span> button on the robot to abort the program!";
Blockly.Msg.MENU_ROBOT_TOOLTIP = "robots";
Blockly.Msg.MENU_ROBOT_WLAN = "WLAN credentials ...";
Blockly.Msg.MENU_RUN_MULT_SIM = "multiple robot simulation ...";
Blockly.Msg.MENU_SAVE = "save";
Blockly.Msg.MENU_SAVE_AS = "save as ...";
Blockly.Msg.MENU_SHOW_AGAIN = "show welcome note again";
Blockly.Msg.MENU_SHOW_CODE = "open/close source code view";
Blockly.Msg.MENU_SIM_BACK = "Back";
Blockly.Msg.MENU_SIM_DRAW = "Drawing Scene";
Blockly.Msg.MENU_SIM_IMPORT_TOOLTIP = "Upload your own simulation background image, it will be appended at the end of the background's list.";
Blockly.Msg.MENU_SIM_MATH = "Math Scene";
Blockly.Msg.MENU_SIM_POSE_TOOLTIP = "Move the robot back to its initial position.";
Blockly.Msg.MENU_SIM_RESCUE = "Rescue Scene";
Blockly.Msg.MENU_SIM_ROBERTA = "Roberta Scene";
Blockly.Msg.MENU_SIM_ROBOT_TOOLTIP = "open/close the robot's view";
Blockly.Msg.MENU_SIM_SCENE_TOOLTIP = "change the scene";
Blockly.Msg.MENU_SIM_SIMPLE = "Simple Scene";
Blockly.Msg.MENU_SIM_START_TOOLTIP = "Start your program in the simulation.";
Blockly.Msg.MENU_SIM_STOP = "Stop";
Blockly.Msg.MENU_SIM_STOP_TOOLTIP = "Stop your program in the simulation.";
Blockly.Msg.MENU_SIM_VALUES_TOOLTIP = "Open/close the sensors' data view.";
Blockly.Msg.MENU_SIM_VARIABLES_TOOLTIP = "Open/close the variable data view.";
Blockly.Msg.MENU_SIM_WRO = "World Robot Olympiad scene";
Blockly.Msg.MENU_SOURCE_CODE_EDITOR = "open source code editor";
Blockly.Msg.MENU_START_BRICK = "run on »$«";
Blockly.Msg.MENU_START_SIM = "open/close simulation view";
Blockly.Msg.MENU_STATE_INFO = "state information";
Blockly.Msg.MENU_STOP_BRICK = "stop program on »$«";
Blockly.Msg.MENU_TOOLBOX = "NEPO-Blocks";
Blockly.Msg.MENU_TOOLBOX_BEGINNER = "NEPO-Blocks beginner";
Blockly.Msg.MENU_TOOLBOX_EXPERT = "NEPO-Blocks expert";
Blockly.Msg.MENU_TUTORIAL = "tutorials";
Blockly.Msg.MENU_TUTORIAL_TOOLTIP = "tutorials";
Blockly.Msg.MENU_USER = "login";
Blockly.Msg.MENU_USERGROUP_LOG_IN = "Log in with user group ...";
Blockly.Msg.MENU_USER_STATE_TOOLTIP = "user info";
Blockly.Msg.MENU_USER_TOOLTIP = "user";
Blockly.Msg.MENU_WLAN_CREDENTIALS = "WLAN credentials";
Blockly.Msg.MENU_ZOOM = "zoom";
Blockly.Msg.MENU_ZOOM_IN = "zoom in";
Blockly.Msg.MENU_ZOOM_OUT = "zoom out";
Blockly.Msg.MENU_ZOOM_RESET = "reset zoom";
Blockly.Msg.MESSAGE_ADDED_USER = "User »$« was added";
Blockly.Msg.MESSAGE_CONFIGURATION_DELETED = "Configuration »$« was deleted";
Blockly.Msg.MESSAGE_EDIT_CHECK = "Your program is now checked!";
Blockly.Msg.MESSAGE_EDIT_SAVE_CONFIGURATION = "Your configuration has been saved";
Blockly.Msg.MESSAGE_EDIT_SAVE_CONFIGURATION_AS = "Your configuration has been saved as »$«";
Blockly.Msg.MESSAGE_EDIT_SAVE_GROUP_AS = "Your group has been created";
Blockly.Msg.MESSAGE_EDIT_SAVE_PROGRAM = "Your program has been saved";
Blockly.Msg.MESSAGE_EDIT_SAVE_PROGRAM_AS = "Your program has been saved as »$«";
Blockly.Msg.MESSAGE_EDIT_START = "Your program »$« will run in a moment!";
Blockly.Msg.MESSAGE_FIRMWARE_ERROR = "The firmware of your robot is newer than that of the Open Roberta Lab. Please tell your server admin, that the server needs to be updated.";
Blockly.Msg.MESSAGE_GROUP_DELETED = "Group »$« was deleted";
Blockly.Msg.MESSAGE_INVALID_CONF_NAME = "Please fill in a correct name. A correct name begins with a letter and can only contain letters or numbers. The default name »[robot]basis« can't be used here.";
Blockly.Msg.MESSAGE_INVALID_NAME = "Please fill in a correct name. A correct name begins with a letter and can only contain letters or numbers, max. length is 255.";
Blockly.Msg.MESSAGE_NOT_AVAILABLE = "Not available.";
Blockly.Msg.MESSAGE_PROGRAM_DELETED = "Program »$« was deleted";
Blockly.Msg.MESSAGE_RESTART_ROBOT = "Please reconnect the robot to the Open Roberta Lab.";
Blockly.Msg.MESSAGE_ROBOT_CONNECTED = "Your robot »$« is connected";
Blockly.Msg.MESSAGE_ROBOT_DISCONNECTED = "An active robot was disconnected";
Blockly.Msg.MESSAGE_USER_DELETED = "User deleted";
Blockly.Msg.MESSAGE_USER_GROUP_DELETED = "User »$« was deleted";
Blockly.Msg.MESSAGE_USER_LOGIN = "Hello »$«";
Blockly.Msg.MESSAGE_USER_LOGOUT = "You are logged out";
Blockly.Msg.MICROBITBRICK_TOOLTIP = "Represents micro:bit, a pocket-sized codeable computer. There are also inbuilt actors and sensors available, e.g. buttons, display ...";
Blockly.Msg.MICROPHONE_GETSAMPLE_TOOLTIP = "Gets the current reading from the microphone in % (mapped to 0 - 100). If the value is always low, the value has to be multiplied by 10, because the amplification is missing on the hardware.";
Blockly.Msg.MODE = "mode";
Blockly.Msg.MODE_ACCELERATION = "acceleration";
Blockly.Msg.MODE_ALTITUDE = "altitude";
Blockly.Msg.MODE_AMBIENTLIGHT = "ambient light";
Blockly.Msg.MODE_ANALOG = "analog value";
Blockly.Msg.MODE_ANGLE = "angle";
Blockly.Msg.MODE_CLAP = "clap";
Blockly.Msg.MODE_CLOSE = "close";
Blockly.Msg.MODE_COLOUR = "colour";
Blockly.Msg.MODE_COMPASS = "compass";
Blockly.Msg.MODE_CURRENT = "current";
Blockly.Msg.MODE_DATE = "date";
Blockly.Msg.MODE_DEGREE = "degree";
Blockly.Msg.MODE_DIGITAL = "digital value";
Blockly.Msg.MODE_DISTANCE = "distance";
Blockly.Msg.MODE_HUMIDITY = "humidity";
Blockly.Msg.MODE_IDALL = "IDs (list)";
Blockly.Msg.MODE_IDONE = "ID";
Blockly.Msg.MODE_INFO = "information";
Blockly.Msg.MODE_LATITUDE = "latitude";
Blockly.Msg.MODE_LIGHT = "light";
Blockly.Msg.MODE_LINE = "line";
Blockly.Msg.MODE_LONGITUDE = "longitude";
Blockly.Msg.MODE_MODULATED = "modulated";
Blockly.Msg.MODE_MOISTURE = "moisture";
Blockly.Msg.MODE_NAMEALL = "names (list)";
Blockly.Msg.MODE_NAMEONE = "name";
Blockly.Msg.MODE_OBSTACLE = "obstacle";
Blockly.Msg.MODE_OPEN = "open";
Blockly.Msg.MODE_ORIENTATION = "orientation";
Blockly.Msg.MODE_PM10 = "PM10";
Blockly.Msg.MODE_PM25 = "PM2.5";
Blockly.Msg.MODE_PRESENCE = "presence";
Blockly.Msg.MODE_PRESSED = "pressed";
Blockly.Msg.MODE_PRESSURE = "pressure";
Blockly.Msg.MODE_PULSEHIGH = "pulse time HIGH";
Blockly.Msg.MODE_PULSELOW = "pulse time LOW";
Blockly.Msg.MODE_RATE = "rate";
Blockly.Msg.MODE_RCCODE = "R/C code";
Blockly.Msg.MODE_REFLEXION = "reflected light";
Blockly.Msg.MODE_RGB = "RGB";
Blockly.Msg.MODE_ROTATION = "rotation";
Blockly.Msg.MODE_SENSOR1 = "Light Sensor1";
Blockly.Msg.MODE_SENSOR2 = "Light Sensor2";
Blockly.Msg.MODE_SOUND = "sound";
Blockly.Msg.MODE_SPEED = "speed";
Blockly.Msg.MODE_TEMPERATURE = "temperature";
Blockly.Msg.MODE_TILTED = "tilted";
Blockly.Msg.MODE_TIME = "time";
Blockly.Msg.MODE_UNMODULATED = "unmodulated";
Blockly.Msg.MODE_UVLIGHT = "UV light";
Blockly.Msg.MODE_VALUE = "value";
Blockly.Msg.MODE_WORD = "word";
Blockly.Msg.MODE_X = "X-value";
Blockly.Msg.MODE_Y = "Y-value";
Blockly.Msg.MODE_Z = "Z-value";
Blockly.Msg.MOISTURE_TOOLTIP = "Represents a moisture sensor.";
Blockly.Msg.MOTIONKIT = "MotionKit";
Blockly.Msg.MOTIONKIT_DUAL_TOOLTIP = "Sets each MotionKit motor to the specified direction.";
Blockly.Msg.MOTIONKIT_SINGLE_TOOLTIP = "Sets the selected MotionKit motor/motors to the specified direction.";
Blockly.Msg.MOTION_TOOLTIP = "Represents a motion sensor.";
Blockly.Msg.MOTOR = "motor";
Blockly.Msg.MOTORDIFF_ON_FOR_TOOLTIP = "Starts the robot with specific speed and stops after specific distance.";
Blockly.Msg.MOTORDIFF_ON_TOOLTIP = "Starts the robot with specific speed.";
Blockly.Msg.MOTORDIFF_STOP_TOOLTIP = "Stops the robot.";
Blockly.Msg.MOTORDIFF_TURN_FOR_TOOLTIP = "Turns the robot for number of degrees.";
Blockly.Msg.MOTORDIFF_TURN_TOOLTIP = "Turns the robot.";
Blockly.Msg.MOTORS_ON_TOOLTIP_CALLIOPE = "Turns motor A and B on with a specific power.";
Blockly.Msg.MOTORS_ON_TOOLTIP_CALLIOPE_CB = "Turns both motors on with a specific power. Power can be positiv or negativ for reverse direction.";
Blockly.Msg.MOTORS_STOP_TOOLTIP = "Stops both motors, A and B.";
Blockly.Msg.MOTOR_ARDU_TOOLTIP = "Represents a Bot'n Roll chassis motor.";
Blockly.Msg.MOTOR_BACKWARD = "backwards";
Blockly.Msg.MOTOR_BIG = "big";
Blockly.Msg.MOTOR_BIG_TOOLTIP = "Represents a big motor.";
Blockly.Msg.MOTOR_BRAKE = "brake";
Blockly.Msg.MOTOR_DEGREE = "degree";
Blockly.Msg.MOTOR_DISTANCE = "distance cm";
Blockly.Msg.MOTOR_DRIVE = "drive";
Blockly.Msg.MOTOR_FLOAT = "float";
Blockly.Msg.MOTOR_FOREWARD = "forwards";
Blockly.Msg.MOTOR_GETPOWER_TOOLTIP = "Gets current power of this motor.";
Blockly.Msg.MOTOR_LEFT = "left";
Blockly.Msg.MOTOR_MIDDLE = "middle";
Blockly.Msg.MOTOR_MIDDLE_TOOLTIP = "Represents a middle motor.";
Blockly.Msg.MOTOR_NONE = "none";
Blockly.Msg.MOTOR_ON_FOR_TOOLTIP = "Turns motor on and stops motor after execution of rotations/degrees.";
Blockly.Msg.MOTOR_ON_FOR_TOOLTIP_MS = "Turns motor on and stops motor after execution after time has passed.";
Blockly.Msg.MOTOR_ON_FOR_TOOLTIP_RPM = "Turns motor on at speed in rpms (rotation per minute) and stops motor after execution of rotations/degrees.";
Blockly.Msg.MOTOR_ON_FOR_TOOLTIP_SERVO = "Sets the servo motor to a specific position in degrees.";
Blockly.Msg.MOTOR_ON_TOOLTIP = "Turns motor on with specific power.";
Blockly.Msg.MOTOR_ON_TOOLTIP_CALLIOPE = "Turns motor A, B or A+B on with a specific power.";
Blockly.Msg.MOTOR_ON_TOOLTIP_CALLIOPE_CB = "Turns left or right motor on with a specific power. Power can be positiv or negativ for reverse direction.";
Blockly.Msg.MOTOR_OTHER = "other power consumer";
Blockly.Msg.MOTOR_PAN = "pan";
Blockly.Msg.MOTOR_PORT = "motor port";
Blockly.Msg.MOTOR_PORT_ARDUINO = "motor 28BYJ-48 port";
Blockly.Msg.MOTOR_REGULATION = "regulation";
Blockly.Msg.MOTOR_RIGHT = "right";
Blockly.Msg.MOTOR_ROTATION = "rotation";
Blockly.Msg.MOTOR_ROTATION_PER_MINUTE = "rpm";
Blockly.Msg.MOTOR_ROTATION_REVERSE = "direction of rotation";
Blockly.Msg.MOTOR_SETPOWER_TOOLTIP = "Sets power of this motor.";
Blockly.Msg.MOTOR_SIDE = "side";
Blockly.Msg.MOTOR_SPEED = "speed %";
Blockly.Msg.MOTOR_SPEED_0 = "Motor Speed is 0!";
Blockly.Msg.MOTOR_STEER = "steer";
Blockly.Msg.MOTOR_STOP = "stop";
Blockly.Msg.MOTOR_STOP_TOOLTIP = "Stops this motor.";
Blockly.Msg.MOTOR_TILT = "tilt";
Blockly.Msg.MOTOR_TURN = "turn";
Blockly.Msg.NAO_ABSOLUTE = "absolute";
Blockly.Msg.NAO_ACCELEROMETER = "accelerometer";
Blockly.Msg.NAO_ACCELEROMETER_TOOLTIP = "Get the current reading from the accelerometer in the given direction";
Blockly.Msg.NAO_ANIMATION_TOOLTIP = "Perform the selected animation. TaiChi is a complex and artistic set of moves. Blink will only make the robot blink by using its LEDs. The wink and wipe forehead animation can be performed while siting and standing.";
Blockly.Msg.NAO_ANSWER = "answer";
Blockly.Msg.NAO_APPLYPOSTURE = "let NAO";
Blockly.Msg.NAO_APPLYPOSTURE_TOOLTIP = "Robot will take the selected posture or position. Use the dropdown menu to choose one.";
Blockly.Msg.NAO_AUTONOMOUS = "turn autonomous behaviour";
Blockly.Msg.NAO_AUTONOMOUS_TOOLTIP = "Turn the robots autonomous behaviour on or off. While 'on' the robot will react to sounds, move slightly from side to side and try to track faces. Turn it off if this behaviour interrupts your program.";
Blockly.Msg.NAO_BLINK = "blink";
Blockly.Msg.NAO_CAMERA = "camera";
Blockly.Msg.NAO_CAMERA_BOTTOM = "bottom";
Blockly.Msg.NAO_CAMERA_TOP = "top";
Blockly.Msg.NAO_FACE_GET_INFORMATION_TOOLTIP = "Returns additional information about the given detected in an array with following values: [XAngle, YAngle, XSize, YSize, Heading], please note that all values are given in camera angles.";
Blockly.Msg.NAO_FILENAME = "filename";
Blockly.Msg.NAO_FORGETFACEOF = "forget face of";
Blockly.Msg.NAO_FORGETFACE_TOOLTIP = "Delete a face previously saved under a given name from the vision recognition database on the robot. ";
Blockly.Msg.NAO_FRAME = "frame";
Blockly.Msg.NAO_FRAME_TORSO = "torso";
Blockly.Msg.NAO_FRAME_WORLD = "world";
Blockly.Msg.NAO_FSR = "force sensitive resistor";
Blockly.Msg.NAO_GETLANGUAGE_TOOLTIP = "Get the active language. This is the language the robot is currently using for Text to Speech and Voice recognition.";
Blockly.Msg.NAO_GETVOLUME_TOOLTIP = "Get current volume.";
Blockly.Msg.NAO_GYROMETER = "gyrometer";
Blockly.Msg.NAO_GYROMETER_TOOLTIP = "Get the current reading from the gyrometer in the given direction.";
Blockly.Msg.NAO_HAND = "hand";
Blockly.Msg.NAO_HAND_TOOLTIP = "Open or close a single hand (wrist) of the robot.";
Blockly.Msg.NAO_HEADSENSOR = "head sensor";
Blockly.Msg.NAO_INTENSITY = "intensity";
Blockly.Msg.NAO_JOINT_ANKLEPITCH = "ankle pitch";
Blockly.Msg.NAO_JOINT_ANKLEROLL = "ankle roll";
Blockly.Msg.NAO_JOINT_ELBOWROLL = "elbow roll";
Blockly.Msg.NAO_JOINT_ELBOWYAW = "elbow yaw";
Blockly.Msg.NAO_JOINT_HAND = "hand";
Blockly.Msg.NAO_JOINT_HEADPITCH = "head pitch";
Blockly.Msg.NAO_JOINT_HEADYAW = "head yaw";
Blockly.Msg.NAO_JOINT_HIPPITCH = "hip pitch";
Blockly.Msg.NAO_JOINT_HIPROLL = "hip roll";
Blockly.Msg.NAO_JOINT_HIPYAWPITCH = "hip yaw pitch";
Blockly.Msg.NAO_JOINT_KNEEPITCH = "knee pitch";
Blockly.Msg.NAO_JOINT_SHOULDERPITCH = "shoulder pitch";
Blockly.Msg.NAO_JOINT_SHOULDERROLL = "shoulder roll";
Blockly.Msg.NAO_JOINT_WRISTYAW = "wrist yaw";
Blockly.Msg.NAO_LEARNFACEOF = "learn face of";
Blockly.Msg.NAO_LEARNFACE_TOOLTIP = "Learn and save a face under a given name in the vision recognition database on the robot.";
Blockly.Msg.NAO_LED = "LED";
Blockly.Msg.NAO_LEDOFF_TOOLTIP = "Turn the selected LED(s) off.";
Blockly.Msg.NAO_LEDRESET_TOOLTIP = "Reset the selected LEDs to their original state regarding colour and intensity.";
Blockly.Msg.NAO_LED_ALL = "all";
Blockly.Msg.NAO_LED_CHEST = "chest";
Blockly.Msg.NAO_LED_EAR = "ear";
Blockly.Msg.NAO_LED_EARS = "ears";
Blockly.Msg.NAO_LED_EYE = "eye";
Blockly.Msg.NAO_LED_EYES = "eyes";
Blockly.Msg.NAO_LED_FOOT = "foot";
Blockly.Msg.NAO_LED_HEAD = "head";
Blockly.Msg.NAO_LED_TOOLTIP = "Set the color of selected LED(s). Eyes and feet LEDs are available.";
Blockly.Msg.NAO_LOOKAT = "look at";
Blockly.Msg.NAO_MARK_GET_INFORMATION_TOOLTIP = "Returns additional information about the given NAO mark in an array with following values: [XAngle, YAngle, XSize, YSize, Heading], please note that all values are given in camera angles.";
Blockly.Msg.NAO_MOVE = "move";
Blockly.Msg.NAO_MOVEJOINT_TOOLTIP = "Move a single joint of the robot. A relative movement means that the current position of the selected joint is used to calculate the new position. Be aware that every joint has different limits. Therefore the input range for the degerees varies.";
Blockly.Msg.NAO_PART_ARM = "arm";
Blockly.Msg.NAO_PART_ARMS = "arms";
Blockly.Msg.NAO_PART_BODY = "body";
Blockly.Msg.NAO_PART_HEAD = "head";
Blockly.Msg.NAO_PART_LEG = "leg";
Blockly.Msg.NAO_PART_LEGS = "legs";
Blockly.Msg.NAO_PERFORM = "perform";
Blockly.Msg.NAO_PHRASE = "phrase";
Blockly.Msg.NAO_PLAYFILE_TOOLTIP = "Plays a sound file from the robot. Enter the name of the file. The file needs to be transferred to the robot beforehand.";
Blockly.Msg.NAO_PLAY_FILE = "play file";
Blockly.Msg.NAO_POINTAT = "point at";
Blockly.Msg.NAO_POINTLOOKAT_TOOLTIP = "Robot points or looks at a given position. The robot will move one of its hands or the head. Select the frame that is the point of reference. The values are entered in centimeter. Refer to the wiki for more information about the coordinate systems.";
Blockly.Msg.NAO_POSTURE_CROUCH = "crouch";
Blockly.Msg.NAO_POSTURE_LYINGBACK = "lie back";
Blockly.Msg.NAO_POSTURE_LYINGBELLY = "lie belly";
Blockly.Msg.NAO_POSTURE_REST = "rest";
Blockly.Msg.NAO_POSTURE_SIT = "sit";
Blockly.Msg.NAO_POSTURE_SITRELAX = "sit relaxed";
Blockly.Msg.NAO_POSTURE_STAND = "stand";
Blockly.Msg.NAO_POSTURE_STANDINIT = "stand init";
Blockly.Msg.NAO_POSTURE_STANDZERO = "stand zero";
Blockly.Msg.NAO_QQVGA = "160*120";
Blockly.Msg.NAO_QVGA = "320*240";
Blockly.Msg.NAO_RANDOMEYES = "random eyes";
Blockly.Msg.NAO_RANDOMEYES_TOOLTIP = "The color of the eyes is changed randomly for a specified amount of time entered in milliseconds.";
Blockly.Msg.NAO_RASTA = "rasta";
Blockly.Msg.NAO_RASTA_TOOLTIP = "The color of the eyes is changed between green, yellow and red for a specified amount of time entered in milliseconds.";
Blockly.Msg.NAO_RECOGNIZEWORD = "speech recognizer of";
Blockly.Msg.NAO_RECOGNIZEWORD_TOOLTIP = "Returns a word from the given list when recognized by NAO";
Blockly.Msg.NAO_RECORDVIDEO = "record video";
Blockly.Msg.NAO_RECORDVIDEO_TOOLTIP = "Records a video and saves it on the robot. Access the robots file system to view the video.";
Blockly.Msg.NAO_RELATIVE = "relative";
Blockly.Msg.NAO_RESOLUTION = "resolution";
Blockly.Msg.NAO_SETINTENSITY_TOOLTIP = "Set the intensity of selected LED(s) in a range from 0 to 100. Ears, head and chest LEDs are available";
Blockly.Msg.NAO_SETLANGUAGE_TOOLTIP = "Set the language. Be aware that it is necessary to download the language pack before you can use it. For more information refer to the manual of your robot.";
Blockly.Msg.NAO_SETVOLUME_TOOLTIP = "Set the volume in a range from 0 to 100.";
Blockly.Msg.NAO_STIFFNESS = "lock motors";
Blockly.Msg.NAO_STIFFNESS_TOOLTIP = "The stiffness of the selected body part of the robot will be turned on or off. Be aware that releasing the leg motors while the robot is standing may result in robot collapsing.";
Blockly.Msg.NAO_STOP = "stop movement";
Blockly.Msg.NAO_STOP_TOOLTIP = "The robot immediately stops all movement. Be aware that this can lead to situations where downfall is possible.";
Blockly.Msg.NAO_TAI_CHI = "tai chi";
Blockly.Msg.NAO_TAKEPICTURE = "take picture";
Blockly.Msg.NAO_TAKEPICTURE_TOOLTIP = "Takes a picture and saves it on the robot. Access the robots file system to view the picture.";
Blockly.Msg.NAO_TOUCHSENSOR_TOOLTIP = "Is true if the selected touchsensor on the robot was touched.";
Blockly.Msg.NAO_TURN_TOOLTIP = "Turns the robot for number of degrees. Only enter positive values and use the dropdown to select the direction. It is possible to enter values up to 360 degrees.";
Blockly.Msg.NAO_VGA = "640*480";
Blockly.Msg.NAO_WALK = "walk";
Blockly.Msg.NAO_WALKTO = "walk to";
Blockly.Msg.NAO_WALKTO_TOOLTIP = "The robot walks to the given position. The values are entered in cm and radians and are based on the coordinate system in NAOs body. Please refer to the wiki for more information on the coordinate system and how to calculate the coordinates.";
Blockly.Msg.NAO_WALK_ASYNC_TOOLTIP = "Makes the robot walk infinitely";
Blockly.Msg.NAO_WALK_TOOLTIP = "Makes the robot walk a distance entered in cm. Distances below 10cm might lead to no movement at all. Depending on your robot and the surface the robots is walking on the distance might not be exact.";
Blockly.Msg.NAO_WAVE = "wave";
Blockly.Msg.NAO_WIPE_FOREHEAD = "wipe forehead";
Blockly.Msg.NEW_VARIABLE = "New variable...";
Blockly.Msg.NEW_VARIABLE_TITLE = "New variable name:";
Blockly.Msg.NO = "no";
Blockly.Msg.NXTBRICK_TOOLTIP = "Represents the NXT brick with connected actors and sensors. There are also inbuilt actors and sensors available, e.g. buttons, display ...";
Blockly.Msg.OFF = "off";
Blockly.Msg.OLDER_THEN_14 = "I am 16 or older than 16!";
Blockly.Msg.ON = "on";
Blockly.Msg.ORA_ACCESS_RIGHT_CHANGED = "The shared right for user »$« is updated!";
Blockly.Msg.ORA_ACCESS_RIGHT_DELETED = "The shared right for user »$« is deleted!";
Blockly.Msg.ORA_ACCOUNT_NOT_ACTIVATED_TO_SHARE = "Your are not allowed to share. Please activate your account! <br><a href='https://www.roberta-home.de/index.php?id=138&L=1' target='_blank'>Further information ...</a>";
Blockly.Msg.ORA_COMPILERWORKFLOW_ERROR_CONFIGURATION_NOT_FOUND = "The robot configuration could not be found on the server.";
Blockly.Msg.ORA_COMPILERWORKFLOW_ERROR_CONFIGURATION_TRANSFORM_FAILED = "The robot configuration could not be transformed into the robots programming language.";
Blockly.Msg.ORA_COMPILERWORKFLOW_ERROR_PROGRAM_COMPILE_FAILED = "Your program has errors so it cannot be compiled. The compiler messages are: <span style='background-color:#ddd;font-family:courier;'>{MESSAGE}</span>";
Blockly.Msg.ORA_COMPILERWORKFLOW_ERROR_PROGRAM_GENERATION_FAILED = "The program could not be generated.";
Blockly.Msg.ORA_COMPILERWORKFLOW_ERROR_PROGRAM_GENERATION_FAILED_WITH_PARAMETERS = "The program could not be generated. Pin {PIN} is incorrect in block {BLOCK}";
Blockly.Msg.ORA_COMPILERWORKFLOW_ERROR_PROGRAM_NOT_FOUND = "The program could not be transformed into the robots programming language.";
Blockly.Msg.ORA_COMPILERWORKFLOW_ERROR_PROGRAM_STORE_FAILED = "The program could not be saved because of an internal error.";
Blockly.Msg.ORA_COMPILERWORKFLOW_ERROR_PROGRAM_TRANSFORM_FAILED = "The program could not be transformed into the robots programming language.";
Blockly.Msg.ORA_COMPILERWORKFLOW_SUCCESS = "The program build succeeded";
Blockly.Msg.ORA_CONFIGURATION_DELETE_ERROR = "An error has occurred while deleting the robot configuration, please try it again!";
Blockly.Msg.ORA_CONFIGURATION_DELETE_SUCCESS = "Configuration deleted";
Blockly.Msg.ORA_CONFIGURATION_ERROR_ID_INVALID = "Configuration name is not a valid identifier.";
Blockly.Msg.ORA_CONFIGURATION_GET_ALL_SUCCESS = "Configuration loaded";
Blockly.Msg.ORA_CONFIGURATION_GET_ONE_ERROR_NOT_FOUND = "The robot configuration could not be found in the database.";
Blockly.Msg.ORA_CONFIGURATION_GET_ONE_SUCCESS = "Configuration loaded";
Blockly.Msg.ORA_CONFIGURATION_SAVE_ERROR = "An error has occurred while saving the robot configuration.";
Blockly.Msg.ORA_CONFIGURATION_SAVE_ERROR_NOT_SAVED_TO_DB = "An error error has occurred while saving the configuration in the database.";
Blockly.Msg.ORA_CONFIGURATION_SAVE_SUCCESS = "Configuration saved";
Blockly.Msg.ORA_FIRMWARE_RESET_ERROR = "Loading the original program failed!";
Blockly.Msg.ORA_FIRMWARE_RESET_SUCCESS = "Your original program will run in a moment!";
Blockly.Msg.ORA_GALLERY_UPLOAD_ERROR = "Your program »$« couldn't be uploaded to the gallery, it seems as if it is already uploaded.";
Blockly.Msg.ORA_GALLERY_UPLOAD_SUCCESS = "Your program »$« is now in the gallery!";
Blockly.Msg.ORA_GROUP_ADD_MEMBER_ERROR = "There was an error while adding new members the user group. Please reload the current form and try again. If this error should persist, please contact our support.";
Blockly.Msg.ORA_GROUP_ADD_MEMBER_ERROR_LIMIT_REACHED = "You can not have more than 99 members in one user group.";
Blockly.Msg.ORA_GROUP_ADD_MEMBER_ERROR_SMALLER_THAN_ONE = "To add automatically generated members, you must enter an integer that is bigger or equals to 1.";
Blockly.Msg.ORA_GROUP_CREATE_ERROR = "There was an error on creating the user group. Please try different inputs or try again later. If this error should persist, please contact our support.";
Blockly.Msg.ORA_GROUP_CREATE_ERROR_GROUP_ALREADY_EXISTS = "You already have a user group with the that name. Please enter another name.";
Blockly.Msg.ORA_GROUP_CREATE_ERROR_GROUP_LIMIT_REACHED = "You reached the limit of user groups. You can not have more than 100 user groups in total.";
Blockly.Msg.ORA_GROUP_CREATE_ERROR_NOT_SAVED_TO_DB = "This group already exists";
Blockly.Msg.ORA_GROUP_DELETE_ERROR = "There was an error while deleting the user group. Please reload the user group list and try again. If this error should persist, please contact our support.";
Blockly.Msg.ORA_GROUP_DELETE_ERROR_GROUP_DOES_NOT_EXISTS = "Could not find a user group with the specified name. Please reload the list of your user groups and try again.";
Blockly.Msg.ORA_GROUP_DELETE_ERROR_GROUP_HAS_MEMBERS = "One or more members of the user group have logged in in the past and created programs. In order to delete the user group, delete its members first.";
Blockly.Msg.ORA_GROUP_ERROR_MISSING_RIGHTS_TO_BE_GROUP_OWNER = "You are not allowed to be a user group owner. Your account must have an validated email attached.";
Blockly.Msg.ORA_GROUP_ERROR_NAME_INVALID = "The name of the user group is invalid. Please do not use special characters and enter at least one character.";
Blockly.Msg.ORA_GROUP_GET_ALL_ERROR = "There was an error while aquiring the list of user groups. Please reload the menu and try again. If this error should persist, please contact our support.";
Blockly.Msg.ORA_GROUP_GET_ONE_ERROR = "There was an error while aquiring the user group. Please reload the menu and try again. If this error should persist, please contact our support.";
Blockly.Msg.ORA_GROUP_GET_ONE_ERROR_NOT_FOUND = "Could not find a user group with the specified name.";
Blockly.Msg.ORA_GROUP_MEMBER_ERROR_ALREADY_EXISTS = "A member with the given name already exists in the user group.";
Blockly.Msg.ORA_GROUP_MEMBER_SHARE_RESTRICTION_EXCEEDED = "You can only share programs with other members of your user group. The owner of your user group can automatically read your programs.";
Blockly.Msg.ORA_GROUP_RENAME_ERROR = "There was an error while changing the name of the user group. Please reload the current form and try again. If this error should persist, please contact our support.";
Blockly.Msg.ORA_GROUP_TO_SHARE_DOES_NOT_EXIST = "You do not own a user group with the name you entered. <br />Try again with a different name!";
Blockly.Msg.ORA_GROUP_UPDATE_ERROR = "There was an error while updating the user group. Please reload the user group list and try again. If this error should persist, please contact our support.";
Blockly.Msg.ORA_GROUP_UPDATE_ERROR_NOT_FOUND = "Could not find a user group with the specified name. Please reload the current form and try again.";
Blockly.Msg.ORA_GROUP_UPDATE_ERROR_NOT_OWNER = "Could not update the user group. You are not the owner of that group.";
Blockly.Msg.ORA_LIKE_DELETE_SUCCESS = "You do not like program »$« anymore!";
Blockly.Msg.ORA_LIKE_SAVE_ERROR_EXISTS = "You couldn't like program »$«. Maybe you have already liked it.";
Blockly.Msg.ORA_LIKE_SAVE_SUCCESS = "You like program »$« now!";
Blockly.Msg.ORA_LIST_CREATE_WITH_ERROR = "Error: This block may be used only within a variable declaration.";
Blockly.Msg.ORA_OWNER_DOES_NOT_EXIST = "The owner does not exist.";
Blockly.Msg.ORA_PROGRAM_CONFIGURATION_NOT_COMPATIBLE = "Program is not compatible with the configuration";
Blockly.Msg.ORA_PROGRAM_DELETE_ERROR = "An error error has occurred while deleting the configuration. Please try it again!";
Blockly.Msg.ORA_PROGRAM_DELETE_SUCCESS = "Program deleted";
Blockly.Msg.ORA_PROGRAM_ERROR_ID_INVALID = "The name of your  program is already used by the system. Please choose another name and try it again!";
Blockly.Msg.ORA_PROGRAM_GET_ALL_ERROR_USER_NOT_FOUND = "Can not load the programs of the specified user. Please reload the lab and try again.";
Blockly.Msg.ORA_PROGRAM_GET_ALL_SUCCESS = "Programs loaded";
Blockly.Msg.ORA_PROGRAM_GET_ONE_ERROR_NOT_FOUND = "Program not found.";
Blockly.Msg.ORA_PROGRAM_GET_ONE_ERROR_NOT_LOGGED_IN = "You are not logged in, please log in with your username and password or create a new user.";
Blockly.Msg.ORA_PROGRAM_GET_ONE_SUCCESS = "Program loaded";
Blockly.Msg.ORA_PROGRAM_IMPORT_ERROR = "»$.xml« is not a valid NEPO program and cannot be uploaded!";
Blockly.Msg.ORA_PROGRAM_IMPORT_ERROR_WRONG_ROBOT_TYPE = "You tried to import a program suitable for »$«, which is different from your menu selection.<br> Please switch the robot type in the robot's menu and try to import again!";
Blockly.Msg.ORA_PROGRAM_INVALID_STATEMETNS = "There are errors in your program or configuration. Please check the messages.";
Blockly.Msg.ORA_PROGRAM_SAVE_AS_ERROR_PROGRAM_EXISTS = "This program already exists.";
Blockly.Msg.ORA_PROGRAM_SAVE_ERROR_NO_WRITE_PERMISSION = "You don't have the permission to modify this program!";
Blockly.Msg.ORA_PROGRAM_SAVE_ERROR_OPTIMISTIC_TIMESTAMP_LOCKING = "This program has been changed recently by someone else. You can save your changes in a new program, choose >save as< !";
Blockly.Msg.ORA_PROGRAM_SAVE_ERROR_PROGRAM_TO_UPDATE_NOT_FOUND = "The program could not be found, so it is impossible to update it.";
Blockly.Msg.ORA_PROGRAM_SAVE_SUCCESS = "Program saved";
Blockly.Msg.ORA_PROGRAM_TO_SHARE_DOES_NOT_EXIST = "The program that you would like to share does not exist.";
Blockly.Msg.ORA_ROBOT_DOES_NOT_EXIST = "It seems that we do not support the desired robot system!<br>Please choose another one.";
Blockly.Msg.ORA_ROBOT_FIRMWAREUPDATE_IMPOSSIBLE = "An error has occurred while updating the new firmware on your robot.";
Blockly.Msg.ORA_ROBOT_FIRMWAREUPDATE_POSSIBLE = "The firmware was updated";
Blockly.Msg.ORA_ROBOT_NOT_CONNECTED = "There is no robot connected. Check if your robot is switched on, connect it to the server and type in the robot's password under robot - connect in the menu. <br /> If you have problems to do this, please have a look at our help pages.";
Blockly.Msg.ORA_ROBOT_NOT_WAITING = "The robot does not wait for a run command.";
Blockly.Msg.ORA_ROBOT_PUSH_RUN = "Robot waited and now the jar is pushed to the robot";
Blockly.Msg.ORA_ROBOT_PUSH_RUN_CALLIOPE2016 = "Your program »$« is downloaded to Calliope, press the reset button to start it!";
Blockly.Msg.ORA_ROBOT_PUSH_RUN_NXT = "Your program »$« is downloaded to the NXT, start it on the robot!";
Blockly.Msg.ORA_ROBOT_SET_SUCCESS = "Switched to robot system »$«!";
Blockly.Msg.ORA_SERVER_ERROR = "Server-Error";
Blockly.Msg.ORA_TOKEN_SET_ERROR_NO_ROBOT_WAITING = "Check if your robot is switched on and connected to the server. <br />If you have problems to do this, please have a look at our help pages.";
Blockly.Msg.ORA_TOKEN_SET_ERROR_WRONG_ROBOTTYPE = "You are trying to connect a robot of a different type as selected in the menu. <br> Please switch the robot type in the robot's menu and try to connect again!";
Blockly.Msg.ORA_TOKEN_SET_SUCCESS = "Token set";
Blockly.Msg.ORA_TOOLBOX_DELETE_ERROR = "An error has occurred while deleting the toolbox, please try it again!";
Blockly.Msg.ORA_TOOLBOX_DELETE_SUCCESS = "Toolbox deleted";
Blockly.Msg.ORA_TOOLBOX_ERROR_ID_INVALID = "Toolbox name is not a valid identifier.";
Blockly.Msg.ORA_TOOLBOX_GET_ALL_SUCCESS = "Toolbox loaded";
Blockly.Msg.ORA_TOOLBOX_GET_ONE_ERROR_NOT_FOUND = "The toolbox could not be found in the database.";
Blockly.Msg.ORA_TOOLBOX_GET_ONE_SUCCESS = "Toolbox loaded";
Blockly.Msg.ORA_TOOLBOX_SAVE_ERROR = "An error has occurred while saving the toolbox.";
Blockly.Msg.ORA_TOOLBOX_SAVE_ERROR_NOT_SAVED_TO_DB = "An error error has occurred while saving the configuration in the database.";
Blockly.Msg.ORA_TOOLBOX_SAVE_SUCCESS = "Toolbox saved";
Blockly.Msg.ORA_TOOLBOX_TRANSFORM_ERROR = "Transformation error?";
Blockly.Msg.ORA_USER_ACTIVATION_INVALID_URL = "The link is not valid anymore. Please ask for resending your verification mail again";
Blockly.Msg.ORA_USER_ACTIVATION_SENT_MAIL_FAIL = "Sorry, we cannot send a mail to you, please contact »support-o-r@iais.fraunhofer.de«";
Blockly.Msg.ORA_USER_ACTIVATION_SENT_MAIL_SUCCESS = "We send a mail to you, please check your mailbox!";
Blockly.Msg.ORA_USER_ACTIVATION_SUCCESS = "Your account is successfully verified! Please login!";
Blockly.Msg.ORA_USER_CREATE_ERROR_ACCOUNT_LENGTH = "Your account name or your user name is to long. Please make sure that they are not longer then 25 digits. Your account couldn't be created.";
Blockly.Msg.ORA_USER_CREATE_ERROR_CONTAINS_SPECIAL_CHARACTERS = "You are using some one or more special characters in your account name! Please remove them. Your account couldn't be created.";
Blockly.Msg.ORA_USER_CREATE_ERROR_MISSING_REQ_FIELDS = "Please make sure you have filled in all required fields! Your account couldn't be created.";
Blockly.Msg.ORA_USER_CREATE_ERROR_NOT_SAVED_TO_DB = "The given user name already exists in the database, please choose another user name.";
Blockly.Msg.ORA_USER_CREATE_SUCCESS = "Your user account »$« was successfully created!";
Blockly.Msg.ORA_USER_DEACTIVATION_SUCCESS = "Your account is currently not verified, please check your mailbox!";
Blockly.Msg.ORA_USER_DELETE_ERROR_HAS_GROUPS = "You have user groups associated with your account. Please delete them first, before you delete your account.";
Blockly.Msg.ORA_USER_DELETE_ERROR_ID_NOT_FOUND = "Error while deleting user.";
Blockly.Msg.ORA_USER_DELETE_ERROR_NOT_DELETED_IN_DB = "Error while deleting user in database.";
Blockly.Msg.ORA_USER_DELETE_SUCCESS = "Your account »$« was successfully deleted. Hope to see you soon again!";
Blockly.Msg.ORA_USER_EMAIL_ONE_ERROR_USER_NOT_EXISTS_WITH_THIS_EMAIL = "This email address is unknown, maybe you have spelled it wrong!";
Blockly.Msg.ORA_USER_ERROR_EMAIL_USED = "There is already an account with this email address registered. Please enter another email address!";
Blockly.Msg.ORA_USER_ERROR_NOT_LOGGED_IN = "You need to be logged in to a user account to use this function. If you are logged in, please log out and in again.";
Blockly.Msg.ORA_USER_GET_ALL_SUCCESS = "Users loaded";
Blockly.Msg.ORA_USER_GET_ONE_ERROR_ID_OR_PASSWORD_WRONG = "You have entered wrong user name or password. Please try again!";
Blockly.Msg.ORA_USER_GET_ONE_SUCCESS = "Login successful";
Blockly.Msg.ORA_USER_GROUP_SAVE_AS_ERROR_USER_GROUP_EXISTS = "This user already belongs to the group";
Blockly.Msg.ORA_USER_PASSWORD_RECOVERY_EXPIRED_URL = "The link is not valid anymore. Please ask for resetting your password again, if you still cannot remember it!";
Blockly.Msg.ORA_USER_PASSWORD_RECOVERY_SENT_MAIL_FAIL = "Sorry, we cannot send a mail to you, please contact »support-o-r@iais.fraunhofer.de«";
Blockly.Msg.ORA_USER_PASSWORD_RECOVERY_SENT_MAIL_SUCCESS = "We send a mail to you, please check your mailbox!";
Blockly.Msg.ORA_USER_TO_ADD_NOT_FOUND = "User was not found";
Blockly.Msg.ORA_USER_TO_SHARE_DOES_NOT_EXIST = "The user with which you would like to share the program does not exist. <br />Try it again!";
Blockly.Msg.ORA_USER_TO_SHARE_SAME_AS_LOGIN_USER = "You cannot share any programs with yourself.";
Blockly.Msg.ORA_USER_UPDATE_ERROR_NOT_SAVED_TO_DB = "The password could not be saved to the database. Are you sure that you entered the old password correctly?";
Blockly.Msg.ORA_USER_UPDATE_SUCCESS = "Your changes have been successfully saved!";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
Blockly.Msg.OUTPUT = "output";
Blockly.Msg.PARTICLE_TOOLTIP = "Represents SDS011 particle sensor.";
Blockly.Msg.PASSWORD = "Password";
Blockly.Msg.PIN_ISTOUCHED_TOOLTIP = "Is the selected pin touched?";
Blockly.Msg.PIN_PULL = "pull";
Blockly.Msg.PIN_PULL_DOWN = "down";
Blockly.Msg.PIN_PULL_NONE = "none";
Blockly.Msg.PIN_PULL_UP = "up";
Blockly.Msg.PIN_SET_PULL_TOOLTIP = "Sets the pull of the chosen pin";
Blockly.Msg.PIN_WRITE = "write";
Blockly.Msg.PITCH = "pitch";
Blockly.Msg.PLAY = "play";
Blockly.Msg.PLAY_DURATION = "duration ms";
Blockly.Msg.PLAY_EIGHTH = "eighth note";
Blockly.Msg.PLAY_FILE = "file";
Blockly.Msg.PLAY_FILE_TOOLTIP = "Plays a sound file.";
Blockly.Msg.PLAY_FREQUENZ = "frequency Hz";
Blockly.Msg.PLAY_GETVOLUME_TOOLTIP = "Gets current volume.";
Blockly.Msg.PLAY_HALF = "half note";
Blockly.Msg.PLAY_NOTE = "note";
Blockly.Msg.PLAY_NOTE_TOOLTIP = "Plays a music note";
Blockly.Msg.PLAY_QUARTER = "quarter note";
Blockly.Msg.PLAY_SETVOLUME_TOOLTIP = "Sets volume.";
Blockly.Msg.PLAY_SIXTEENTH = "sixteenth note";
Blockly.Msg.PLAY_TONE = "tone";
Blockly.Msg.PLAY_TONE_TOOLTIP = "Plays a tone. Use frequency and duration to determin the tone pitch and duration.";
Blockly.Msg.PLAY_TOOLTIP = "Represents a buzzer.";
Blockly.Msg.PLAY_VOLUME = "volume";
Blockly.Msg.PLAY_WHOLE = "whole note";
Blockly.Msg.POPUP_ABOUT_JOIN = "I want to help";
Blockly.Msg.POPUP_ABOUT_TEXT = "The Open Roberta Lab is a cloud-based integrated programming environment that enables children and adolescents to program easily different robot/microcontroller systems. This platform is completely open source so taking part is desirable! Both the software and the open source developer tools are available via Fraunhofer servers.";
Blockly.Msg.POPUP_ABOUT_TEXT_DEV = "The Open Roberta Lab is an open-source programming platform developed by Fraunhofer IAIS within the initiative <a href='http://www.roberta-home.de/' target='_blank'>»Roberta – Learning with Robots«</a>";
Blockly.Msg.POPUP_ABOUT_TEXT_GOOG = "Open Roberta was initiated in collaboration with Google Germany to reduce the hurdles for students, teachers and schools programming educational robots.</a>";
Blockly.Msg.POPUP_AGE = "Age";
Blockly.Msg.POPUP_ATTENTION = "Attention";
Blockly.Msg.POPUP_BACKGROUND_STORAGE = "The Open Roberta Lab can automatically load your simulation background on your next visits. For this purpose, we will save data in the Local Storage on your computer. <a href='https://www.roberta-home.de/en/privacy-policy-open-roberta-lab/' target='_blank'>More information in our privacy policy.</a>";
Blockly.Msg.POPUP_BEFOREUNLOAD = "You have unsaved changes in your program or configuration. Sign in and save your program or configuration.";
Blockly.Msg.POPUP_BEFOREUNLOAD_LOGGEDIN = "You have unsaved changes in your program or configuration.";
Blockly.Msg.POPUP_CANCEL = "Cancel";
Blockly.Msg.POPUP_CHANGE_PASSWORD = "change password ...";
Blockly.Msg.POPUP_CONFIRM_CONTINUE = "<br><br><i>Press »OK« to discard your work. Press »Cancel« to stay here and save your work first.</i>";
Blockly.Msg.POPUP_CONFIRM_DELETE_CONFIGURATION = "Do you really want to delete the configuration ?";
Blockly.Msg.POPUP_CONFIRM_DELETE_GROUP = "Do you really want to delete these groups?";
Blockly.Msg.POPUP_CONFIRM_DELETE_PROGRAM = "Do you really want to delete the following program or programs?<br><br>If you delete a program you share with others, you delete it for everyone.<br><br>If you delete a program shared with you, you do not delete the program but the sharing.<br><br>If you delete a program with the owner »Gallery«, you remove your program from the gallery!";
Blockly.Msg.POPUP_CONFIRM_DELETE_USER_GROUP = "Do you really want to remove these users below from the current group?";
Blockly.Msg.POPUP_CONFIRM_UPDATE_FIRMWARE = "There is a new firmware version for your robot available. You can try to run programs with the old version, but best bet is to update your robot now! You just have to click »Update now«.";
Blockly.Msg.POPUP_CONTINUE = "continue anyway";
Blockly.Msg.POPUP_CREATE_BOOKMARK = "Create a browser bookmark now to save your robot selection!";
Blockly.Msg.POPUP_DISPLAY_HEADER = "output of your program";
Blockly.Msg.POPUP_DOWNLOAD = "Download your program to »$«";
Blockly.Msg.POPUP_DOWNLOAD_CHECK = "Okay, I've changed the download folder of my browser permanently. Don't show this popup again and download my programs directly.";
Blockly.Msg.POPUP_DOWNLOAD_STEP_1 = "Right click on your program link below and";
Blockly.Msg.POPUP_DOWNLOAD_STEP_1_EDISON = "Connect your Edison via the EdComm cable and press the round button";
Blockly.Msg.POPUP_DOWNLOAD_STEP_1_SENSEBOX = "Check that your device is in programming mode (LED dimming in a pattern), if not, double press the red button. Right click on you program link below and";
Blockly.Msg.POPUP_DOWNLOAD_STEP_2 = "choose »Save link as ...«, then";
Blockly.Msg.POPUP_DOWNLOAD_STEP_2_EDISON = "click on »Play« to play your program to Edison and";
Blockly.Msg.POPUP_DOWNLOAD_STEP_3 = "click on your connected »$« in the left column,";
Blockly.Msg.POPUP_DOWNLOAD_STEP_3_EDISON = "wait until Edison beeps, then unplug.";
Blockly.Msg.POPUP_DOWNLOAD_STEP_4 = "now click on the »Save« button on the bottom right.<br><span style='font-size: 14px;'>If your program doesn't start automatically press the reset button after a while.</span>";
Blockly.Msg.POPUP_DOWNLOAD_STEP_4_EDISON = "Press the triangle button to start your program on your Edison<br><span style='font-size: 14px;'>Having trouble? Turn up the volume and check that all sound enhancements are turned off</span>";
Blockly.Msg.POPUP_DOWNLOAD_STEP_4_SENSEBOX = "now click on the »Save« button on the bottom right.";
Blockly.Msg.POPUP_DO_UPDATE_FIRMWARE = "Update now";
Blockly.Msg.POPUP_EMAIL = "E-Mail";
Blockly.Msg.POPUP_EMAIL_SEND = "Send now";
Blockly.Msg.POPUP_GET_LINK = "Here is the link to your actual program. Please don't change it, it probably won't work anymore. It's already copied to your clipboard!</br>$";
Blockly.Msg.POPUP_MULTIPLE_ROBOTS = "Select multiple programs for the simulation";
Blockly.Msg.POPUP_MULTROBOTS_NOPROGRAMS = "Please create and store at least two programs which then can be executed each by a simulated robot!";
Blockly.Msg.POPUP_NAME = "Name";
Blockly.Msg.POPUP_NEW_PASSWORD = "New Password";
Blockly.Msg.POPUP_OLD_PASSWORD = "Old Password";
Blockly.Msg.POPUP_PASSWORD = "Password";
Blockly.Msg.POPUP_PASSWORD_RECOVERY = "reset password ...";
Blockly.Msg.POPUP_PROGRAM_TERMINATED_UNEXPECTED = "The execution of the program on the robot has terminated unexpectedly!";
Blockly.Msg.POPUP_REGISTER_USER = "Register now";
Blockly.Msg.POPUP_REPEAT_PASSWORD = "Repeat password";
Blockly.Msg.POPUP_ROBOT_BATTERY = "Voltage";
Blockly.Msg.POPUP_ROBOT_NAME = "Name";
Blockly.Msg.POPUP_ROBOT_NOT_CONNECTED = "You have to make a connection to your robot first.";
Blockly.Msg.POPUP_ROBOT_STATE = "State";
Blockly.Msg.POPUP_ROBOT_STATE_BUSY = "busy";
Blockly.Msg.POPUP_ROBOT_STATE_DISCONNECTED = "disconnected";
Blockly.Msg.POPUP_ROBOT_STATE_WAIT = "wait";
Blockly.Msg.POPUP_ROBOT_SYSTEM = "System";
Blockly.Msg.POPUP_ROBOT_WAIT = "Waiting time";
Blockly.Msg.POPUP_SCANNED_ROBOTS = "found robots";
Blockly.Msg.POPUP_STARTUP_COOKIES = "We use cookies to personalise content and to analyse our traffic.";
Blockly.Msg.POPUP_STARTUP_HELP = "Do you need help?";
Blockly.Msg.POPUP_STARTUP_HELP_TEXT = "In our detailed help, we will explain everything you need, from building instructions to frequently asked questions.";
Blockly.Msg.POPUP_STARTUP_HIDE = "Okay, don't show this window again and remember my choice with a bookmark.";
Blockly.Msg.POPUP_STARTUP_START = "Choose your system!";
Blockly.Msg.POPUP_STARTUP_TOUR_TEXT = "Would you like to get started, but do not know exactly how? We will show you the first steps in an interactive tutorial.";
Blockly.Msg.POPUP_TOUR = "take a tour";
Blockly.Msg.POPUP_USERNAME = "Username";
Blockly.Msg.POPUP_USERNAME_LOGOFF = "You are not logged in.";
Blockly.Msg.POPUP_VALUE = "Value";
Blockly.Msg.POPUP_WLAN_SECURITY_INFORMATION = "Please note that the data provided in this dialog window is private and will not be stored in the OpenRoberta lab; it will only be used for program creation and during the compilation process. Make sure that for each new session you enter these credentials again. Please keep in mind that exposing this information to public may pose security risks.";
Blockly.Msg.POPUP_WLAN_SSID = "SSID";
Blockly.Msg.PORT_ANKLE = "ankle";
Blockly.Msg.PORT_BUMPER = "bumper";
Blockly.Msg.PORT_ELBOW = "elbow";
Blockly.Msg.PORT_HAND = "hand";
Blockly.Msg.PORT_HEAD = "head";
Blockly.Msg.PORT_HIP = "hip";
Blockly.Msg.PORT_INTERNAL = "Port internal";
Blockly.Msg.PORT_KNEE = "knee";
Blockly.Msg.PORT_SHOULDER = "shoulder";
Blockly.Msg.PORT_WRIST = "wrist";
Blockly.Msg.POTENTIOMETER_TOOLTIP = "Represents a potentiometer.";
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "allow statements";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "with:";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Run the user-defined function '%1'.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Run the user-defined function '%1' and use its output.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "with:";
Blockly.Msg.PROCEDURES_CREATE_DO = "Create '%1'";
Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "Describe this function...";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "doSomething";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "to";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Creates a function with no output.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "return";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Creates a function with an output.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Warning: This function has duplicate parameters.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Highlight function definition";
Blockly.Msg.PROCEDURES_IFRETURN_HELPURL = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "If a value is true, then return a second value.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Warning: This block may be used only within a function definition.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "input name:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Add an input to the function.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "inputs";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Add, remove, or reorder inputs to this function.";
Blockly.Msg.PROCEDURES_TITLE = "« procedure";
Blockly.Msg.PROCEDURES_VARIABLES_ERROR = "Error: This block may be used only within the »";
Blockly.Msg.PROCEDURES_VARIABLES_LOOP_ERROR = "Error: This block may be used only within a loop which declares ";
Blockly.Msg.PROGLIST_DELETE_ALL_TOOLTIP = "Click here to delete all selected programs.";
Blockly.Msg.PROGLIST_DELETE_TOOLTIP = "Click here to delete your program.";
Blockly.Msg.PROGLIST_LOAD_TOOLTIP = "Click here to load your robot configuration in the configuration environment.";
Blockly.Msg.PROGLIST_SHARE_TOOLTIP = "Click here to share your program with a friend.";
Blockly.Msg.PROGLIST_SHARE_WITH_GALLERY = "Do you really want to share your program with everybody? If you are not sure please check the question and answers <a href='https://www.roberta-home.de/index.php?id=138&L=1' target='_blank'>here</a>.";
Blockly.Msg.PROGLIST_SHARE_WITH_GALLERY_TOOLTIP = "Click here to upload your program to the gallery hence share it with all other users.";
Blockly.Msg.PROGRAM_ERROR_EXPRBLOCK_PARSE = "This expression is syntactically incorrect.";
Blockly.Msg.PROGRAM_ERROR_EXPRBLOCK_TYPECHECK = "This expression is invalid. The type check failed.";
Blockly.Msg.PULSEHIGH = "pulse time HIGH";
Blockly.Msg.PULSELOW = "pulse time LOW";
Blockly.Msg.PULSETOOLTIP = "Represents a pulse sensor.";
Blockly.Msg.RADIO_GET_RSSI_TOOLTIP = "Gets the RSSI of the last package.";
Blockly.Msg.REDO = "Redo";
Blockly.Msg.RELAY = "relay";
Blockly.Msg.RELAY_ARDUINO = "relay SRD-05VDC-SL-C";
Blockly.Msg.RELAY_TOOLTIP = "Represents a relay.";
Blockly.Msg.REMOVE_COMMENT = "Remove Comment";
Blockly.Msg.RENAME_VARIABLE = "Rename variable...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Rename all '%1' variables to:";
Blockly.Msg.RESEND_ACTIVATION = "resend verification email";
Blockly.Msg.RETURN = "return";
Blockly.Msg.RFID_TOOLTIP = "Represents an RFID reader.";
Blockly.Msg.RGBLED_TOOLTIP = "Represents an RGB LED.";
Blockly.Msg.RGB_LED_TOOLTIP = "Turns the LED on or off and changes the color.";
Blockly.Msg.RIGHT = "right";
Blockly.Msg.ROLL = "roll";
Blockly.Msg.ROTATIONS_PER_MINUTE = "rpm";
Blockly.Msg.SAY = "say";
Blockly.Msg.SAY_PARAMETERS_TOOLTIP = "The robot says the given text. It is also possible to enter special charaters. The robot will use the selected language to try and speak the entered text. Modify the speed (range: 0-100) and the pitch of the voice (range: 0-100) with the input fields";
Blockly.Msg.SAY_TOOLTIP = "The robot says the given text. It is also possible to enter special charaters. The robot will use the selected language to try and speak the entered text.";
Blockly.Msg.SDCARD_TOOLTIP = "Represents an SD card.";
Blockly.Msg.SEND_DATA = "data to send";
Blockly.Msg.SEND_DATA_SENSEMAP = "openSenseMap";
Blockly.Msg.SEND_DATA_TO = "send data to";
Blockly.Msg.SEND_DATA_TO_OSM_TOOLTIP = "This block is used to send data from sensors to the openSenseMap. Please configure the IDs in the configuration prior to the usage of this block.";
Blockly.Msg.SENSEBOXBRICK_TOOLTIP = "Represents the senseBox. Please configure here the id's from the openSenseMap, if you want to use them.";
Blockly.Msg.SENSOR_ACCELEROMETER = "accelerometer";
Blockly.Msg.SENSOR_ACCELEROMETER_X_GETSAMPLE_TOOLTIP_ARDUINO = "Returns the acceleration value on the X axis in g. Can be in range from -4 g to 4 g.";
Blockly.Msg.SENSOR_ACCELEROMETER_X_GETSAMPLE_TOOLTIP_SENSEBOX = "Returns the acceleration value on the X axis in g. Can be in range from -2 g to 2 g.";
Blockly.Msg.SENSOR_ACCELEROMETER_Y_GETSAMPLE_TOOLTIP_ARDUINO = "Returns the acceleration value on the Y axis in g. Can be in range from -4 g to 4 g.";
Blockly.Msg.SENSOR_ACCELEROMETER_Y_GETSAMPLE_TOOLTIP_SENSEBOX = "Returns the acceleration value on the Y axis in g. Can be in range from -2 g to 2 g.";
Blockly.Msg.SENSOR_ACCELEROMETER_Z_GETSAMPLE_TOOLTIP_ARDUINO = "Returns the acceleration value on the Z axis in g. Can be in range from -4 g to 4 g.";
Blockly.Msg.SENSOR_ACCELEROMETER_Z_GETSAMPLE_TOOLTIP_SENSEBOX = "Returns the acceleration value on the Z axis in g. Can be in range from -2 g to 2 g.";
Blockly.Msg.SENSOR_AMBIENTLIGHT = "ambientlight sensor";
Blockly.Msg.SENSOR_ANALOGOUT = "sensor analog";
Blockly.Msg.SENSOR_ANY = "anyplace";
Blockly.Msg.SENSOR_ARM_TOOLTIP = "Returns true, if the selected part of the arm is touched, otherwise false.";
Blockly.Msg.SENSOR_BATTERY = "battery charge";
Blockly.Msg.SENSOR_BOTTOM = "bottom";
Blockly.Msg.SENSOR_CALIBRATE = "calibrate";
Blockly.Msg.SENSOR_CODE = "code pad";
Blockly.Msg.SENSOR_COLOUR = "colour sensor";
Blockly.Msg.SENSOR_COLOUR_EDISON = "line tracker";
Blockly.Msg.SENSOR_COMPASS = "compass sensor";
Blockly.Msg.SENSOR_COMPASS_EV3 = "HT compass sensor";
Blockly.Msg.SENSOR_DETECTFACE = "face detector";
Blockly.Msg.SENSOR_DETECTFACE_GETSAMPLE_TOOLTIP = "Detect a face previously learned and saved.";
Blockly.Msg.SENSOR_DETECTMARK = "NAO Mark sensor";
Blockly.Msg.SENSOR_DETECTMARK_GETSAMPLE_TOOLTIP = "Returns one or an array of IDs (number) of the last detected NAO Mark(s). If no marks are detected, -1 or an array consisting of 1 element with value -1 is returned. For a list of NAO marks with corresponding numbers refer to the wiki.";
Blockly.Msg.SENSOR_DIGITALOUT = "sensor digital";
Blockly.Msg.SENSOR_DROP = "drop sensor";
Blockly.Msg.SENSOR_DROP_GETSAMPLE_TOOLTIP = "Gets the current reading from the drop sensor in percent.";
Blockly.Msg.SENSOR_DROP_OFF = "drop-off sensor";
Blockly.Msg.SENSOR_ELECTRICCURRENT = "current sensor";
Blockly.Msg.SENSOR_ELECTRICCURRENT_GETSAMPLE_TOOLTIP = "Get the electric current from the motorboard in the selected joint.";
Blockly.Msg.SENSOR_ENCODER = "encoder";
Blockly.Msg.SENSOR_FLAME = "flame sensor";
Blockly.Msg.SENSOR_FSR = "force-sensing resistor";
Blockly.Msg.SENSOR_FSR_GETSAMPLE_TOOLTIP = "Get the current reading from the force sensitive resistor under the feet of the robot.";
Blockly.Msg.SENSOR_GESTURE = "gesture";
Blockly.Msg.SENSOR_GESTURE_ACTIVE = "active?";
Blockly.Msg.SENSOR_GESTURE_DOWN = "upside down";
Blockly.Msg.SENSOR_GESTURE_DOWN_GETSAMPLE_TOOLTIP = "Returns »true« if the posture is down.";
Blockly.Msg.SENSOR_GESTURE_FACE_DOWN = "at the front side";
Blockly.Msg.SENSOR_GESTURE_FACE_DOWN_GETSAMPLE_TOOLTIP = "Returns »true« if the posture is face down.";
Blockly.Msg.SENSOR_GESTURE_FACE_UP = "at the back";
Blockly.Msg.SENSOR_GESTURE_FACE_UP_GETSAMPLE_TOOLTIP = "Returns »true« if the posture is face up.";
Blockly.Msg.SENSOR_GESTURE_FREEFALL = "freely falling";
Blockly.Msg.SENSOR_GESTURE_FREEFALL_GETSAMPLE_TOOLTIP = "Returns »true« if it is free falling.";
Blockly.Msg.SENSOR_GESTURE_SHAKE = "shaking";
Blockly.Msg.SENSOR_GESTURE_SHAKE_GETSAMPLE_TOOLTIP = "Returns »true« if it is shaken.";
Blockly.Msg.SENSOR_GESTURE_TOOLTIP = "Is the system in the selected state?";
Blockly.Msg.SENSOR_GESTURE_UP = "upright";
Blockly.Msg.SENSOR_GESTURE_UP_GETSAMPLE_TOOLTIP = "Returns »true« if the posture is upright.";
Blockly.Msg.SENSOR_GET = "get";
Blockly.Msg.SENSOR_GET_SAMPLE = "get value";
Blockly.Msg.SENSOR_GPS_ALTITUDE_GETSAMPLE_TOOLTIP_SENSEBOX = "Returns the altitude in meters.";
Blockly.Msg.SENSOR_GPS_DATE_GETSAMPLE_TOOLTIP_SENSEBOX = "Returns the current date.";
Blockly.Msg.SENSOR_GPS_LATITUDE_GETSAMPLE_TOOLTIP_SENSEBOX = "Returns the latitude in degree.";
Blockly.Msg.SENSOR_GPS_LONGITUDE_GETSAMPLE_TOOLTIP_SENSEBOX = "Returns the longitude in degree.";
Blockly.Msg.SENSOR_GPS_SENSEBOX = "GPS receiver";
Blockly.Msg.SENSOR_GPS_SPEED_GETSAMPLE_TOOLTIP_SENSEBOX = "Returns the speed in km/h.";
Blockly.Msg.SENSOR_GPS_TIME_GETSAMPLE_TOOLTIP_SENSEBOX = "Returns the current time.";
Blockly.Msg.SENSOR_GROVE = "Grove";
Blockly.Msg.SENSOR_GYRO = "gyroscope";
Blockly.Msg.SENSOR_GYRO_TILTED_GETSAMPLE_TOOLTIP_WEDO = "Is the tilt sensors position the indicated manner?";
Blockly.Msg.SENSOR_GYRO_WEDO = "tilt sensor";
Blockly.Msg.SENSOR_GYRO_X_GETSAMPLE_TOOLTIP_ARDUINO = "Returns the gyroscope output on the X axis in degrees per second. Can be in range from -2000 °/s to 2000 °/s.";
Blockly.Msg.SENSOR_GYRO_Y_GETSAMPLE_TOOLTIP_ARDUINO = "Returns the gyroscope output on the Y axis in degrees per second. Can be in range from -2000 °/s to 2000 °/s.";
Blockly.Msg.SENSOR_GYRO_Z_GETSAMPLE_TOOLTIP_ARDUINO = "Returns the gyroscope output on the Z axis in degrees per second. Can be in range from -2000 °/s to 2000 °/s.";
Blockly.Msg.SENSOR_HTCOLOUR = "HT colour sensor";
Blockly.Msg.SENSOR_HUMIDITY = "humidity sensor";
Blockly.Msg.SENSOR_HUMIDITY_ARDUINO = "humidity sensor DHT11";
Blockly.Msg.SENSOR_HUMIDITY_GETSAMPLE_TOOLTIP = "Gets the current reading from the humidity sensor in percent.";
Blockly.Msg.SENSOR_HUMIDITY_SENSEBOX = "humidity/temperature sensor HDC1080";
Blockly.Msg.SENSOR_INFRARED = "infrared sensor";
Blockly.Msg.SENSOR_INFRARED_DISTANCE_GETSAMPLE_TOOLTIP_WEDO = "Gets the current relative distance from the infrared sensor. The values are between 1, close, and 10, further away.";
Blockly.Msg.SENSOR_IRSEEKER = "HT infrared sensor";
Blockly.Msg.SENSOR_IRSEEKER_EDISON = "IR seeker";
Blockly.Msg.SENSOR_IRSEEKER_GETSAMPLE_TOOLTIP = "Gets the position of an infrared beacon.";
Blockly.Msg.SENSOR_IRSEEKER_RCCODE_GETSAMPLE_TOOLTIP_EDISON = "Receives a message from a remote control.";
Blockly.Msg.SENSOR_IS_ARM = "is arm";
Blockly.Msg.SENSOR_IS_PIN = "is";
Blockly.Msg.SENSOR_IS_PRESSED = "pressed?";
Blockly.Msg.SENSOR_IS_TILTED = "tilted?";
Blockly.Msg.SENSOR_IS_TOUCHED = "touched?";
Blockly.Msg.SENSOR_JOYSTICK = "joystick";
Blockly.Msg.SENSOR_KEY = "button";
Blockly.Msg.SENSOR_KEYPAD = "keypad";
Blockly.Msg.SENSOR_KEY_ANY = "any";
Blockly.Msg.SENSOR_KEY_DOWN = "down";
Blockly.Msg.SENSOR_KEY_ENTER = "enter";
Blockly.Msg.SENSOR_KEY_ESCAPE = "escape";
Blockly.Msg.SENSOR_KEY_LEFT = "left";
Blockly.Msg.SENSOR_KEY_PLAY = "play";
Blockly.Msg.SENSOR_KEY_REC = "record";
Blockly.Msg.SENSOR_KEY_RIGHT = "right";
Blockly.Msg.SENSOR_KEY_STOP = "stop";
Blockly.Msg.SENSOR_KEY_UP = "up";
Blockly.Msg.SENSOR_LIGHT = "light sensor";
Blockly.Msg.SENSOR_LIGHTVEML = "visible/UV light sensor";
Blockly.Msg.SENSOR_LIGHTVEML_LIGHT_GETSAMPLE_TOOLTIP = "Reads the current value of the visible light sensor in lux. The value is between 0 to 220000 lux.";
Blockly.Msg.SENSOR_LIGHTVEML_UVLIGHT_GETSAMPLE_TOOLTIP = "Reads the current value of the UV light sensor in μW/cm². The value is between 0 and more than 1000.";
Blockly.Msg.SENSOR_LIGHT_LIGHT_GETSAMPLE_TOOLTIP_EDISON = "Gets the current reading of the light sensor";
Blockly.Msg.SENSOR_LIGHT_LINETRACKER = "line tracker";
Blockly.Msg.SENSOR_MIC = "microphone";
Blockly.Msg.SENSOR_MOISTURE = "moisture sensor";
Blockly.Msg.SENSOR_MOISTURE_GETSAMPLE_TOOLTIP = "Gets the current reading from the moisture sensor in percent.";
Blockly.Msg.SENSOR_MOTION = "motion sensor";
Blockly.Msg.SENSOR_MOTION_ARDUINO = "motion sensor HC-SR501";
Blockly.Msg.SENSOR_MOTION_GETSAMPLE_TOOLTIP = "Gets the current reading from the motion sensor (true/false).";
Blockly.Msg.SENSOR_MS_TIMER = "in ms";
Blockly.Msg.SENSOR_OBSTACLEDETECTOR = "Obstacle detector";
Blockly.Msg.SENSOR_OUT = "sensor";
Blockly.Msg.SENSOR_OUT_ANALOG_GETSAMPLE_TOOLTIP = "Returns the value from the specified analog pin. The value is between 0 and 1024.";
Blockly.Msg.SENSOR_OUT_DIGITAL_GETSAMPLE_TOOLTIP = "Returns the value from the specified digital pin. The value is either HIGH »1« or LOW »0«.";
Blockly.Msg.SENSOR_PARTICLE = "SDS011 particle sensor";
Blockly.Msg.SENSOR_PARTICLE_PM10_GETSAMPLE_TOOLTIP = "Reads the current value of PM10 from the particle sensor.";
Blockly.Msg.SENSOR_PARTICLE_PM25_GETSAMPLE_TOOLTIP = "Reads the current value of PM2.5 from the particle sensor.";
Blockly.Msg.SENSOR_PIN = "pin";
Blockly.Msg.SENSOR_PINTOUCH = "pin";
Blockly.Msg.SENSOR_PINTOUCH_BOB3 = "arm";
Blockly.Msg.SENSOR_PIN_ANALOG_GETSAMPLE_TOOLTIP = "Returns the value from the specified analog pin. The value is between 0 and 1024.";
Blockly.Msg.SENSOR_PIN_DIGITAL_GETSAMPLE_TOOLTIP = "Returns the value from the specified digital pin. The value is either HIGH »1« or LOW »0«.";
Blockly.Msg.SENSOR_PIN_PULSEHIGH_GETSAMPLE_TOOLTIP = "Returns the pulse HIGH on a pin in microseconds or -1 if no complete pulse was received within the timeout.";
Blockly.Msg.SENSOR_PIN_PULSELOW_GETSAMPLE_TOOLTIP = "Returns the pulse LOW on a pin in microseconds or -1 if no complete pulse was received within the timeout.";
Blockly.Msg.SENSOR_POTENTIOMETER = "potentiometer";
Blockly.Msg.SENSOR_POTENTIOMETER_GETSAMPLE_TOOLTIP = "Gets the current reading from the potentiometer in volts (0-5V).";
Blockly.Msg.SENSOR_PULSE = "pulse sensor";
Blockly.Msg.SENSOR_PULSE_GETSAMPLE_TOOLTIP = "Gets the current reading from the pulse sensor.";
Blockly.Msg.SENSOR_PULSE_GETSAMPLE_TOOLTIP_ARDUINO = "Gets the current reading from the pulse sensor. The value is between 0 and 1023.";
Blockly.Msg.SENSOR_RADIO_RSSI = "radio RSSI sensor";
Blockly.Msg.SENSOR_RESET = "reset";
Blockly.Msg.SENSOR_RESET_II = "";
Blockly.Msg.SENSOR_RESET_TOOLTIP_EDISON = "Resets the sensors and clears the values.";
Blockly.Msg.SENSOR_RFID = "RFID reader";
Blockly.Msg.SENSOR_RFID_ARDUINO = "RFID-RC522 reader";
Blockly.Msg.SENSOR_RFID_GETSAMPLE_TOOLTIP = "Gets the current reading from the RFID reader.";
Blockly.Msg.SENSOR_RSSI = "signal strength";
Blockly.Msg.SENSOR_RSSI_VALUE_GETSAMPLE_TOOLTIP = "Gets the signal strength from the last received message.";
Blockly.Msg.SENSOR_SONAR = "sonar";
Blockly.Msg.SENSOR_SOUND = "sound sensor";
Blockly.Msg.SENSOR_SOUND_CALLIOPE = "microphone";
Blockly.Msg.SENSOR_SOUND_CLAP_GETSAMPLE_TOOLTIP_EDISON = "Is a clap detected?";
Blockly.Msg.SENSOR_TEMPERATURE = "temperature sensor";
Blockly.Msg.SENSOR_TEMPERATURE_ARDUINO = "temperature sensor TMP36";
Blockly.Msg.SENSOR_TEMPERATURE_PRESSURE_GETSAMPLE_TOOLTIP = "Gets the current reading of the air pressure sensor in Pascal. Normal air pressure is 101325 Pascal.";
Blockly.Msg.SENSOR_TEMPERATURE_SENSEBOX = "temperature/pressure sensor BMP280";
Blockly.Msg.SENSOR_TIME = "time";
Blockly.Msg.SENSOR_TIMER = "timer";
Blockly.Msg.SENSOR_TOP = "top";
Blockly.Msg.SENSOR_TOUCH = "touch sensor";
Blockly.Msg.SENSOR_ULTRASONIC = "ultrasonic sensor";
Blockly.Msg.SENSOR_ULTRASONIC_ARDUINO = "ultrasonic sensor HC-SR04";
Blockly.Msg.SENSOR_ULTRASONIC_DISTANCE_GETSAMPLE_TOOLTIP_ARDUINO = "Gets the current reading from the ultrasonic sensor in cm. Maximum distance to messure is 400 cm.";
Blockly.Msg.SENSOR_ULTRASONIC_DISTANCE_GETSAMPLE_TOOLTIP_MBOT = "Gets the current reading from the ultrasonic sensor in cm. Maximum distance to messure is 400 cm. Minimum distance tp measure is 3 cm.";
Blockly.Msg.SENSOR_UNIT_ACCEL = "m/s²";
Blockly.Msg.SENSOR_UNIT_AMPERE = "A";
Blockly.Msg.SENSOR_UNIT_CM = "cm";
Blockly.Msg.SENSOR_UNIT_DEGREE = "°";
Blockly.Msg.SENSOR_UNIT_DEGREE_PER_SECOND = "°/s";
Blockly.Msg.SENSOR_UNIT_IRRADIANCE = "μW/cm²";
Blockly.Msg.SENSOR_UNIT_LUX = "lx";
Blockly.Msg.SENSOR_UNIT_METER = "m";
Blockly.Msg.SENSOR_UNIT_MILLIG = "milli-g";
Blockly.Msg.SENSOR_UNIT_MM = "mm";
Blockly.Msg.SENSOR_UNIT_MS = "ms";
Blockly.Msg.SENSOR_UNIT_NEWTON = "N";
Blockly.Msg.SENSOR_UNIT_OMEGA = "ω";
Blockly.Msg.SENSOR_UNIT_PASCAL = "Pascal";
Blockly.Msg.SENSOR_UNIT_PERCENT = "%";
Blockly.Msg.SENSOR_UNIT_PM = "μg/m³";
Blockly.Msg.SENSOR_UNIT_SPEED = "km/h";
Blockly.Msg.SENSOR_UNIT_VOLT = "V";
Blockly.Msg.SENSOR_VALUE = "value";
Blockly.Msg.SENSOR_WALL = "wall sensor";
Blockly.Msg.SERVER_NOT_AVAILABLE = "The Open Roberta Lab is currently not available. </br>Your internet connection was interrupted. If you currently have an EV3 connected via the USB cable solve this with a click on the programming environment.<br>If this problem persists please check your internet connection and try to reload this website. If you have this problem again, please don't hesitate to contact us via mail:</br>support-o-r@iais.fraunhofer.de";
Blockly.Msg.SERVO_MOTOR = "servo motor";
Blockly.Msg.SERVO_MOTOR_ARDUINO = "servo motor SG90";
Blockly.Msg.SERVO_TOOLTIP = "Represents a servo motor.";
Blockly.Msg.SET = "set";
Blockly.Msg.SETLANGUAGE_TOOLTIP = "Set the language.";
Blockly.Msg.SET_LED = "turn LED";
Blockly.Msg.SET_RELAY = "turn relay";
Blockly.Msg.SET_RELAY_ARDUINO = "turn relay SRD-05VDC-SL-C";
Blockly.Msg.SET_RELAY_TOOLTIP = "Turns the relay on or off";
Blockly.Msg.SET_RGB_LED = "turn RGB LED";
Blockly.Msg.SHARE_PROGRAMS_USERGROUP_HINT = "To share programs with a user group, open your program list and share a program with a user group.";
Blockly.Msg.SHARE_WITH_USER = "Share your program with another user ...";
Blockly.Msg.SHARE_WITH_USERGROUP = "Share your program with the members of one of your user groups ...";
Blockly.Msg.SIDE_BRUSH_OFF = "turn side brush off";
Blockly.Msg.SIDE_BRUSH_OFF_TOOLTIP = "Turns the side brush off.";
Blockly.Msg.SIDE_BRUSH_STATUS = "turn side brush";
Blockly.Msg.SIDE_BRUSH_TOOLTIP = "Turns the side brush on or off .";
Blockly.Msg.SIM_BLOCK_NOT_SUPPORTED = "Unfortunately you can not use this block in the simulation!";
Blockly.Msg.SIM_CONFIGURATION_WARNING_SENSOR_MISSING = "This sensor is not in the configuration! The behaviour of the program on the real robot will be different than expected!";
Blockly.Msg.SIM_CONFIGURATION_WARNING_WRONG_INFRARED_SENSOR_PORT = "The infrared sensor is not connected in the configuration! The behaviour of the program on the real robot will be different than expected, please check the robot configuration!";
Blockly.Msg.SIM_CONFIGURATION_WARNING_WRONG_SENSOR_PORT = "In this block you have used a wrong sensor port! The behaviour of the program on the real robot will be different than expected, please check the robot configuration!";
Blockly.Msg.SINGLE_MOTOR_ON_TOOLTIP_CALLIOPE = "Turns the single motor on with a specific power. Power can be positiv or negativ for reverse direction.";
Blockly.Msg.SLEEP = "sleep";
Blockly.Msg.SLOT_FRONT = "front";
Blockly.Msg.SLOT_LEFT = "left";
Blockly.Msg.SLOT_LEFT_PITCH = "left pitch";
Blockly.Msg.SLOT_LEFT_ROLL = "left roll";
Blockly.Msg.SLOT_LEFT_YAW = "left yaw";
Blockly.Msg.SLOT_LEFT_YAW_PITCH = "left yaw pitch";
Blockly.Msg.SLOT_MIDDLE = "middle";
Blockly.Msg.SLOT_PITCH = "pitch";
Blockly.Msg.SLOT_REAR = "rear";
Blockly.Msg.SLOT_RIGHT = "right";
Blockly.Msg.SLOT_RIGHT_PITCH = "right pitch";
Blockly.Msg.SLOT_RIGHT_ROLL = "right roll";
Blockly.Msg.SLOT_RIGHT_YAW = "right yaw";
Blockly.Msg.SLOT_RIGHT_YAW_PITCH = "right yaw pitch";
Blockly.Msg.SLOT_SIDE = "side";
Blockly.Msg.SLOT_TILTED_ANY = "any";
Blockly.Msg.SLOT_TILTED_BACK = "back";
Blockly.Msg.SLOT_TILTED_DOWN = "down";
Blockly.Msg.SLOT_TILTED_FRONT = "front";
Blockly.Msg.SLOT_TILTED_NO = "not";
Blockly.Msg.SLOT_TILTED_UP = "up";
Blockly.Msg.SLOT_YAW = "yaw";
Blockly.Msg.SOCKET = "socket";
Blockly.Msg.SOUND_GETSAMPLE_TOOLTIP = "Gets the current reading from the sound sensor in the range 0 to 100. 0 is quiet and 100 is loud.";
Blockly.Msg.SOUND_TOOLTIP = "Represents a sound sensor.";
Blockly.Msg.SOURCE_CODE_EDITOR_BUILD_TOOLTIP = "Build the source code.";
Blockly.Msg.SOURCE_CODE_EDITOR_CLOSE_CONFIRMATION = "All your changes will be lost!";
Blockly.Msg.SOURCE_CODE_EDITOR_IMPORT_TOOLTIP = "Import current NEPO program.";
Blockly.Msg.SOURCE_CODE_EDITOR_PLACEHOLDER = "Import current NEPO program or just start typing";
Blockly.Msg.SOURCE_CODE_EDITOR_RUN_TOOLTIP = "Run on the robot.";
Blockly.Msg.SOURCE_CODE_EDITOR_UPLOAD_TOOLTIP = "Upload the source code.";
Blockly.Msg.SSID = "SSID";
Blockly.Msg.START = "start";
Blockly.Msg.START_ACTIVITY = "activity";
Blockly.Msg.START_ACTIVITY_TOOLTIP = "Starts additional activity.";
Blockly.Msg.START_PROGRAM = "start";
Blockly.Msg.START_PROGRAM_AUTOMOMOUSLIFE = "autonomous behaviour";
Blockly.Msg.START_PROGRAM_DEBUG = "show sensor data";
Blockly.Msg.START_TOOLTIP = "The starting point for the main program.";
Blockly.Msg.STEPMOTOR_TOOLTIP = "Represents a step motor.";
Blockly.Msg.STEPS_PER_REVOLUTION = "steps per revolution";
Blockly.Msg.STEP_MOTOR = "step motor";
Blockly.Msg.STEP_MOTOR_ARDUINO = "step motor 28BYJ-48";
Blockly.Msg.STEP_MOTOR_ON_TOOLTIP = "Turns motor on with a provided speed in rpm and stops motor after execution of provided number of rotations.";
Blockly.Msg.STRENGTH = "strength";
Blockly.Msg.SWITCH = "switch";
Blockly.Msg.SWITCH_LED_MATRIX_TOOLTIP = "Enables/Disables the LED matrix to use the dual purpose pins.";
Blockly.Msg.TAB_CONFIGURATION = "Robot configuration";
Blockly.Msg.TAB_PROGRAM = "Program";
Blockly.Msg.TEMPERATURE_GETSAMPLE_TOOLTIP = "Gets the current reading from the temperature sensor in °C.";
Blockly.Msg.TEMPERATURE_TOOLTIP = "Represents a temperature sensor.";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "append text";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_APPEND_TO = "to";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Append some text to the first text.";
Blockly.Msg.TEXT_CAST_CHAR_TONUMBER = "cast %1 at index %2 to Number";
Blockly.Msg.TEXT_CAST_CHAR_TONUMBER_TOOLTIP = "Convert the character at the given position in this string into the corresponding ASCII number. The first character in the string is at position 0!";
Blockly.Msg.TEXT_CAST_STRING_TONUMBER = "cast %1 to Number";
Blockly.Msg.TEXT_CAST_STRING_TONUMBER_TOOLTIP = "Convert this string into a number, if it contains a number.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "to lower case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "to Title Case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "to UPPER CASE";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";
Blockly.Msg.TEXT_CHARAT_FIRST = "get first letter";
Blockly.Msg.TEXT_CHARAT_FROM_END = "get letter # from end";
Blockly.Msg.TEXT_CHARAT_FROM_START = "get letter #";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_CHARAT_LAST = "get last letter";
Blockly.Msg.TEXT_CHARAT_RANDOM = "get random letter";
Blockly.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Returns the letter at the specified position.";
Blockly.Msg.TEXT_COMMENT_TOOLTIP = "Write a comment to your code here, to make it easier for you and others to read and understand your code. It will also generate an inline comment in the generated source code";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Add an item to the text.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "join";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Add, remove, or reorder sections to reconfigure this text block.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "to letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "to letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "to last letter";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "in text";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "get substring from first letter";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "get substring from letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "get substring from letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Returns a specified portion of the text.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "find first occurrence of text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "find last occurrence of text";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Returns the index of the first/last occurrence of the first text in the second text. Returns 0 if text is not found.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 is empty";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Returns true if the provided text is empty.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "create text with";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Create a piece of text by joining together any number of items.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_LENGTH_TITLE = "length of %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Returns the number of letters (including spaces) in the provided text.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg.TEXT_PRINT_TITLE = "print %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Print the specified text, number or other value.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Prompt for user for a number.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Prompt for user for some text.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "prompt for number with message";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "prompt for text with message";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "A letter, word, or line of text.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "trim spaces from both sides of";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "trim spaces from left side of";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "trim spaces from right side of";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Return a copy of the text with spaces removed from one or both ends.";
Blockly.Msg.THETA = "theta";
Blockly.Msg.TIMEOUT = "timeout";
Blockly.Msg.TIMER_GETSAMPLE_TOOLTIP = "Gets the current reading from the timer.";
Blockly.Msg.TIMER_RESET_TOOLTIP = "Resets the timer.";
Blockly.Msg.TITLE = "title";
Blockly.Msg.TO = "to";
Blockly.Msg.TODAY = "Today";
Blockly.Msg.TOOLBOX_ACTION = "Action";
Blockly.Msg.TOOLBOX_ANIMATION = "Animation";
Blockly.Msg.TOOLBOX_CLEANING = "Cleaning";
Blockly.Msg.TOOLBOX_COLOUR = "Colours";
Blockly.Msg.TOOLBOX_COMMUNICATION = "Messages";
Blockly.Msg.TOOLBOX_CONTROL = "Control";
Blockly.Msg.TOOLBOX_DECISION = "Decisions";
Blockly.Msg.TOOLBOX_DISPLAY = "Display";
Blockly.Msg.TOOLBOX_DRIVE = "Drive";
Blockly.Msg.TOOLBOX_IMAGE = "Images";
Blockly.Msg.TOOLBOX_LIGHT = "Lights";
Blockly.Msg.TOOLBOX_LIST = "Lists";
Blockly.Msg.TOOLBOX_LOGIC = "Logic";
Blockly.Msg.TOOLBOX_LOOP = "Loops";
Blockly.Msg.TOOLBOX_MATH = "Math";
Blockly.Msg.TOOLBOX_MOVE = "Move";
Blockly.Msg.TOOLBOX_PIN = "Pin";
Blockly.Msg.TOOLBOX_PROCEDURE = "Functions";
Blockly.Msg.TOOLBOX_SENSOR = "Sensors";
Blockly.Msg.TOOLBOX_SOUND = "Sounds";
Blockly.Msg.TOOLBOX_TEXT = "Text";
Blockly.Msg.TOOLBOX_VARIABLE = "Variables";
Blockly.Msg.TOOLBOX_VISION = "Vision";
Blockly.Msg.TOOLBOX_WAIT = "Wait";
Blockly.Msg.TOOLBOX_WALK = "Walk";
Blockly.Msg.TOUCH_ISPRESSED_TOOLTIP = "Is the touch sensor pressed?";
Blockly.Msg.TOUCH_TOOLTIP = "Is the touch sensor pressed?";
Blockly.Msg.TOUR1_DESCRIPTION00 = "next";
Blockly.Msg.TOUR1_DESCRIPTION01 = "Welcome,<br>click on  »next« and start a tour through the Open Roberta Lab.<br>I'll show you how you can program your robot with NEPO.<br>You can end this tour all the time with a click on »X« in the right upper corner.";
Blockly.Msg.TOUR1_DESCRIPTION02 = "The menu ;-)";
Blockly.Msg.TOUR1_DESCRIPTION03 = "Here you can find everything you need to program the robot!<br><span class='typcn typcn-document-text'></span> Save and load programs<br><span class='typcn typcn-ev3'></span> Connect your robot to the Open Roberta Lab or switch to another system<br><span class='typcn typcn-lightbulb'></span> Help for all kinds of problems<br><span class='typcn typcn-user'></span>Everything about user accounts, e.g. login or logoff<br><span class='typcn typcn-th-large-outline'></span> Look at the gallery and try great programs from other users!<br><span class='typcn typcn-world'></span> Click here to switch to another language";
Blockly.Msg.TOUR1_DESCRIPTION04 = "Click here and switch to the robot configuration";
Blockly.Msg.TOUR1_DESCRIPTION05 = "You can adapt the robot configuration later,<br>if you've constructed another robot.<br>If you don't have a robot and want to test your program in the simulation <br>this configuration is applied.";
Blockly.Msg.TOUR1_DESCRIPTION06 = "Click here and switch back to the programming area!";
Blockly.Msg.TOUR1_DESCRIPTION07 = "The toolbox.<br>Here you can find all programming blocks.";
Blockly.Msg.TOUR1_DESCRIPTION07a = "Once you are an experienced user you can switch here to the expert mode of the toolbox.<br>You will then find more blocks to program your robot.<br><span class='typcn typcn-media-stop-outline'></span> beginner mode<br><span class='typcn typcn-star-outline'></span> expert mode";
Blockly.Msg.TOUR1_DESCRIPTION08 = "Each program starts with the »program start« block.<br>Further programming blocks, which the robot should execute, should be attached to this block.<br>Just drag'n drop the desired block right under the start block.";
Blockly.Msg.TOUR1_DESCRIPTION09 = "Here you find some shortcuts!<br>From left to right:<br><span class='typcn typcn-media-play'></span> Click here to execute the program on the real robot<br><span class='typcn typcn-cloud-storage'></span> Save your program, but before that you need to sign in<br><span class='typcn typcn-zoom'></span> Click here and zoom in on the blocks, if you want to<br><span class='typcn typcn-archive'></span> The trashcan! Just move blocks into the trashcan and they will be deleted.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Attention: You cannot recover blocks once they are deleted!<br>";
Blockly.Msg.TOUR1_DESCRIPTION10 = "Click on »Action«";
Blockly.Msg.TOUR1_DESCRIPTION12 = "Now drag'n drop the new block just below the start-program-block so that they are connected";
Blockly.Msg.TOUR1_DESCRIPTION13 = "Now open the simulation ...";
Blockly.Msg.TOUR1_DESCRIPTION13a = "and test your program in the simulation!";
Blockly.Msg.TOUR1_DESCRIPTION15 = "Perfect,<br>your robot is driving 20 cm forward,<br>this is what you have programmed!";
Blockly.Msg.TOUR1_DESCRIPTION16 = "Bye and have fun trying out more!";
Blockly.Msg.ULTRASONIC_GETSAMPLE_TOOLTIP = "Gets the current reading from the ultrasonic sensor in cm. Maximum distance to measure is 255 cm.";
Blockly.Msg.ULTRASONIC_TOOLTIP = "Represents an ultrasonic sensor.";
Blockly.Msg.UNDO = "Undo";
Blockly.Msg.USERGROUP_ADD_MEMBERS = "Add members";
Blockly.Msg.USERGROUP_CREATE = "Create new user group";
Blockly.Msg.USERGROUP_CREATE_TOOLTIP = "Click here to create a new usergroup";
Blockly.Msg.USERGROUP_DELETE_WITH_MEMBERS_WARNING = "Are your sure that you want to delete the usergroup including all members? No member did log in so far.";
Blockly.Msg.USERGROUP_GENERATED_MEMBERS = "Automatically generated members";
Blockly.Msg.USERGROUP_GENERATED_MEMBERS_TOOLTIP = "Automatically genertated members are normal members of a user group. They are generated with a number as username, which you can change afterwards.";
Blockly.Msg.USERGROUP_LIST_DELETE_ALL_TOOLTIP = "Click here to delete all selected user groups.";
Blockly.Msg.USERGROUP_LIST_DELETE_TOOLTIP = "Click here to delete the user group.";
Blockly.Msg.USERGROUP_LOGIN_LOST_PASSWORD_HINT = "If you forgot your password, you can ask the owner of your user group to reset the password to the initial password for you. It will be the password you had to enter when you logged in first.";
Blockly.Msg.USERGROUP_MEMBER_CREATE_TOOLTIP = "Click here to add members to your usergroup.";
Blockly.Msg.USERGROUP_MEMBER_DEFAULT_PASSWORD_HINT = "The password for your account is not safe. Set your own password, so that only you can login to your account.";
Blockly.Msg.USERGROUP_MEMBER_LIST_DELETE_ALL_TOOLTIP = "Click here to delete all selected user group members.";
Blockly.Msg.USERGROUP_MEMBER_LIST_DELETE_TOOLTIP = "Click here to delete this user group member.";
Blockly.Msg.USERGROUP_MEMBER_LIST_RESET_ALL_PASSWORDS_TOOLTIP = "Click here to reset the password of all selected user group members to their corresponding default password.";
Blockly.Msg.USERGROUP_MEMBER_LIST_RESET_PASSWORD_TOOLTIP = "Click here to reset the password of this user group member to the default password.";
Blockly.Msg.USERGROUP_NAME_HINT = "The user group to which you want to log in has a name. Enter it here.";
Blockly.Msg.VACUUM_OFF = "turn vacuum off";
Blockly.Msg.VACUUM_OFF_TOOLTIP = "Turns the vacuum off.";
Blockly.Msg.VACUUM_ON = "turn vacuum on %";
Blockly.Msg.VACUUM_ON_TOOLTIP = "Turns on the vacuum speed in procent";
Blockly.Msg.VALIDATION_CONTAINS_SPECIAL_CHARACTERS = "Valid special characters: »=+!?.,%#+&^@_-«";
Blockly.Msg.VALIDATION_FIELD_REQUIRED = "This field cannot be empty!";
Blockly.Msg.VALIDATION_MAX_LENGTH = "The max. lenght is 25 characters!";
Blockly.Msg.VALIDATION_PASSWORD_MIN_LENGTH = "Password min. length is 6!";
Blockly.Msg.VALIDATION_SECOND_PASSWORD_EQUAL = "The two passwords must be equal!";
Blockly.Msg.VALIDATION_TOKEN_LENGTH = "Token length is 8 characters!";
Blockly.Msg.VALIDATION_VALID_EMAIL_ADDRESS = "Please enter a valid email address!";
Blockly.Msg.VALUE_TO = "value to";
Blockly.Msg.VARIABLES_DEFAULT_NAME = "item";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Create 'set %1'";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Returns the value of this variable.";
Blockly.Msg.VARIABLES_GLOBAL_DECLARE_TOOLTIP = "Declares a global variable.";
Blockly.Msg.VARIABLES_LOCAL_DECLARE_TOOLTIP = "Declares a local variable.";
Blockly.Msg.VARIABLES_SET = "set %1 to %2";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Create 'get %1'";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Sets this variable to be equal to the input.";
Blockly.Msg.VARIABLES_TITLE = "variable";
Blockly.Msg.VARIABLES_TYPE_ARRAY_BOOLEAN = "List Boolean";
Blockly.Msg.VARIABLES_TYPE_ARRAY_COLOUR = "List Colour";
Blockly.Msg.VARIABLES_TYPE_ARRAY_CONNECTION = "List Connection";
Blockly.Msg.VARIABLES_TYPE_ARRAY_IMAGE = "List Image";
Blockly.Msg.VARIABLES_TYPE_ARRAY_NUMBER = "List Number";
Blockly.Msg.VARIABLES_TYPE_ARRAY_STRING = "List String";
Blockly.Msg.VARIABLES_TYPE_BOOLEAN = "Boolean";
Blockly.Msg.VARIABLES_TYPE_COLOUR = "Colour";
Blockly.Msg.VARIABLES_TYPE_CONNECTION = "Connection";
Blockly.Msg.VARIABLES_TYPE_IMAGE = "Image";
Blockly.Msg.VARIABLES_TYPE_NUMBER = "Number";
Blockly.Msg.VARIABLES_TYPE_STRING = "String";
Blockly.Msg.VARIABLE_USED_BEFORE_DECLARATION = "The variable is used before declaration.";
Blockly.Msg.VOICE_PITCH = "voice pitch";
Blockly.Msg.VOICE_SPEED = "voice speed";
Blockly.Msg.WAIT = "wait ms";
Blockly.Msg.WAIT_FOR_TOOLTIP = "Waits for sensor values.";
Blockly.Msg.WAIT_OR = "or wait for";
Blockly.Msg.WAIT_TIME_TOOLTIP = "Waits for a certain time in milliseconds.";
Blockly.Msg.WAIT_TOOLTIP = "Waits for a condition becoming true.";
Blockly.Msg.WAIT_UNTIL = "wait until";
Blockly.Msg.WIRELESS_TOOLTIP = "Represents a wireless connection.";
Blockly.Msg.WRITE_TO_PIN_TOOLTIP = "Sends the value to chosen pin.";
Blockly.Msg.X = "x";
Blockly.Msg.XEND = "end of X axis";
Blockly.Msg.XLABEL = "X axis label";
Blockly.Msg.XSTART = "start of X axis";
Blockly.Msg.XTICK = "distance between X ticks";
Blockly.Msg.Y = "y";
Blockly.Msg.YAW = "yaw";
Blockly.Msg.YEND = "end of Y axis";
Blockly.Msg.YES = "yes";
Blockly.Msg.YLABEL = "Y axis label";
Blockly.Msg.YOUNGER_THEN_14 = "I am younger than 16!";
Blockly.Msg.YSTART = "start of Y axis";
Blockly.Msg.YTICK = "distance between Y ticks";
Blockly.Msg.Z = "z";
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.ACTION_LEDBAR = Blockly.Msg.LEDBAR;
Blockly.Msg.KEY_GETSAMPLE_TOOLTIP = Blockly.Msg.KEY_ISPRESSED_TOOLTIP;
Blockly.Msg.SENSOR_INFRARED_GETSAMPLE_TOOLTIP = Blockly.Msg.INFRARED_GETSAMPLE_TOOLTIP;
Blockly.Msg.SENSOR_PINTOUCH_PRESSED_GETSAMPLE_TOOLTIP = Blockly.Msg.PIN_ISTOUCHED_TOOLTIP;
Blockly.Msg.SENSOR_COLOUR_GETSAMPLE_TOOLTIP = Blockly.Msg.COLOUR_GETSAMPLE_TOOLTIP;
Blockly.Msg.SENSOR_ACCELEROMETER_GETSAMPLE_TOOLTIP = Blockly.Msg.SENSOR_ACCELEROMETER_VALUE_GETSAMPLE_TOOLTIP;
Blockly.Msg.SENSOR_HUMIDITY_TEMPERATURE_GETSAMPLE_TOOLTIP = Blockly.Msg.TEMPERATURE_GETSAMPLE_TOOLTIP;
Blockly.Msg.MODE_DOWN = Blockly.Msg.SENSOR_GESTURE_DOWN;
Blockly.Msg.SENSOR_COLOUR_RGB_GETSAMPLE_TOOLTIP = Blockly.Msg.COLOUR_RGB_GETSAMPLE_TOOLTIP;
Blockly.Msg.SENSOR_ULTRASONIC_GETSAMPLE_TOOLTIP = Blockly.Msg.ULTRASONIC_GETSAMPLE_TOOLTIP;
Blockly.Msg.MODE_UP = Blockly.Msg.SENSOR_GESTURE_UP;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.SENSOR_HTCOLOUR_COLOUR_GETSAMPLE_TOOLTIP = Blockly.Msg.SENSOR_COLOUR_COLOUR_GETSAMPLE_TOOLTIP;
Blockly.Msg.SENSOR_ENCODER_GETSAMPLE_TOOLTIP = Blockly.Msg.ENCODER_GETSAMPLE_TOOLTIP;
Blockly.Msg.MODE_FACE_UP = Blockly.Msg.SENSOR_GESTURE_FACE_UP;
Blockly.Msg.SENSOR_HTCOLOUR_LIGHT_GETSAMPLE_TOOLTIP = Blockly.Msg.SENSOR_COLOUR_LIGHT_GETSAMPLE_TOOLTIP;
Blockly.Msg.SENSOR_COLOUR_LIGHT_GETSAMPLE_TOOLTIP = Blockly.Msg.COLOUR_LIGHT_GETSAMPLE_TOOLTIP;
Blockly.Msg.TOUCH_GETSAMPLE_TOOLTIP = Blockly.Msg.TOUCH_ISPRESSED_TOOLTIP;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.MODE_FACE_DOWN = Blockly.Msg.SENSOR_GESTURE_FACE_DOWN;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.SENSOR_COLOUR_COLOUR_GETSAMPLE_TOOLTIP = Blockly.Msg.COLOUR_COLOUR_GETSAMPLE_TOOLTIP;
Blockly.Msg.HTCOLOUR_GETSAMPLE_TOOLTIP = Blockly.Msg.COLOUR_GETSAMPLE_TOOLTIP;
Blockly.Msg.SENSOR_SOUND_GETSAMPLE_TOOLTIP_CALLIOPE = Blockly.Msg.MICROPHONE_GETSAMPLE_TOOLTIP;
Blockly.Msg.MODE_FREEFALL = Blockly.Msg.SENSOR_GESTURE_FREEFALL;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.SENSOR_TIMER_GETSAMPLE_TOOLTIP = Blockly.Msg.TIMER_GETSAMPLE_TOOLTIP;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.SENSOR_ACCELEROMETER_VALUE_GETSAMPLE_TOOLTIP = Blockly.Msg.ACCELEROMETER_ROTATION_TOOLTIP;
Blockly.Msg.ORA_ROBOT_PUSH_RUN = Blockly.Msg.MESSAGE_EDIT_START;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.SENSOR_HUMIDITY_HUMIDITY_GETSAMPLE_TOOLTIP = Blockly.Msg.SENSOR_HUMIDITY_GETSAMPLE_TOOLTIP;
Blockly.Msg.MODE_SHAKE = Blockly.Msg.SENSOR_GESTURE_SHAKE;
Blockly.Msg.SENSOR_TEMPERATURE_TEMPERATURE_GETSAMPLE_TOOLTIP = Blockly.Msg.TEMPERATURE_GETSAMPLE_TOOLTIP;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.SENSOR_GYRO_GETSAMPLE_TOOLTIP = Blockly.Msg.GYRO_GETSAMPLE_TOOLTIP;
Blockly.Msg.SENSOR_BATTERY_GETSAMPLE_TOOLTIP = Blockly.Msg.BATTERY_GETSAMPLE_TOOLTIP;
Blockly.Msg.SENSOR_LIGHT_GETSAMPLE_TOOLTIP = Blockly.Msg.LIGHT_GETSAMPLE_TOOLTIP;
Blockly.Msg.HTCOLOUR_AMBIENTLIGHT_GETSAMPLE_TOOLTIP = Blockly.Msg.COLOUR_AMBIENTLIGHT_GETSAMPLE_TOOLTIP;
Blockly.Msg.SENSOR_COLOUR_AMBIENTLIGHT_GETSAMPLE_TOOLTIP = Blockly.Msg.COLOUR_AMBIENTLIGHT_GETSAMPLE_TOOLTIP;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.SENSOR_INFRARED_PRESENCE_GETSAMPLE_TOOLTIP = Blockly.Msg.INFRARED_PRESENCE_GETSAMPLE_TOOLTIP;
Blockly.Msg.SENSOR_COMPASS_GETSAMPLE_TOOLTIP = Blockly.Msg.COMPASS_GETSAMPLE_TOOLTIP;
Blockly.Msg.SENSOR_HTCOLOUR_GETSAMPLE_TOOLTIP = Blockly.Msg.SENSOR_COLOUR_GETSAMPLE_TOOLTIP;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.SENSOR_SOUND_GETSAMPLE_TOOLTIP = Blockly.Msg.SOUND_GETSAMPLE_TOOLTIP;
Blockly.Msg.SENSOR_FLAME_GETSAMPLE_TOOLTIP = Blockly.Msg.FLAME_GETSAMPLE_TOOLTIP;
Blockly.Msg.ACTION_FOURDIGITDISPLAY = Blockly.Msg.FOURDIGITDISPLAY;
Blockly.Msg.SENSOR_HTCOLOUR_AMBIENTLIGHT_GETSAMPLE_TOOLTIP = Blockly.Msg.SENSOR_COLOUR_AMBIENTLIGHT_GETSAMPLE_TOOLTIP;
Blockly.Msg.HTCOLOUR_COLOUR_GETSAMPLE_TOOLTIP = Blockly.Msg.COLOUR_COLOUR_GETSAMPLE_TOOLTIP;
Blockly.Msg.HTCOLOUR_LIGHT_GETSAMPLE_TOOLTIP = Blockly.Msg.COLOUR_LIGHT_GETSAMPLE_TOOLTIP;
Blockly.Msg.SENSOR_INFRARED_DISTANCE_GETSAMPLE_TOOLTIP = Blockly.Msg.INFRARED_DISTANCE_GETSAMPLE_TOOLTIP;
Blockly.Msg.SENSOR_HTCOLOUR_RGB_GETSAMPLE_TOOLTIP = Blockly.Msg.SENSOR_COLOUR_RGB_GETSAMPLE_TOOLTIP;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.SENSOR_KEY_GETSAMPLE_TOOLTIP = Blockly.Msg.KEY_GETSAMPLE_TOOLTIP;
Blockly.Msg.SENSOR_TEMPERATURE_GETSAMPLE_TOOLTIP = Blockly.Msg.TEMPERATURE_GETSAMPLE_TOOLTIP;
Blockly.Msg.SENSOR_TOUCH_GETSAMPLE_TOOLTIP = Blockly.Msg.TOUCH_GETSAMPLE_TOOLTIP;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.HTCOLOUR_RGB_GETSAMPLE_TOOLTIP = Blockly.Msg.COLOUR_RGB_GETSAMPLE_TOOLTIP;