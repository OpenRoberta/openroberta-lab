
StmtTextComment [logik_boolean_op-- Start]

Var [x] := StmtExpr [
if BoolConst [true]
,then
exprStmt Binary [ADD, Var [x], NumConst [1]]
,else
exprStmt Binary [ADD, Var [x], NumConst [1000]]
]


Var [x] := StmtExpr [
if BoolConst [false]
,then
exprStmt Binary [ADD, Var [x], NumConst [1000]]
,else
exprStmt Binary [ADD, Var [x], NumConst [1]]
]

AssertStmt [asserts pos-1: Binary [EQ, NumConst [2], Var [x]]]

Var [x] := StmtExpr [
if StmtExpr [
if BoolConst [true]
,then
exprStmt BoolConst [true]
,else
exprStmt BoolConst [false]
]
,then
exprStmt Binary [ADD, Var [x], NumConst [1]]
,else
exprStmt Binary [ADD, Var [x], NumConst [1000]]
]


Var [x] := StmtExpr [
if StmtExpr [
if BoolConst [false]
,then
exprStmt BoolConst [false]
,else
exprStmt BoolConst [true]
]
,then
exprStmt Binary [ADD, Var [x], NumConst [1]]
,else
exprStmt Binary [ADD, Var [x], NumConst [1000]]
]

AssertStmt [asserts pos-2: Binary [EQ, NumConst [4], Var [x]]]

Var [x] := StmtExpr [
if StmtExpr [
if StmtExpr [
if BoolConst [true]
,then
exprStmt BoolConst [true]
,else
exprStmt BoolConst [false]
]
,then
exprStmt BoolConst [true]
,else
exprStmt BoolConst [false]
]
,then
exprStmt Binary [ADD, Var [x], NumConst [1]]
,else
exprStmt Binary [ADD, Var [x], NumConst [1000]]
]

AssertStmt [asserts pos-3: Binary [EQ, NumConst [5], Var [x]]]

Var [x] := StmtExpr [
if StmtExpr [
if StmtExpr [
if Binary [EQ, NumConst [1], NumConst [2]]
,then
exprStmt BoolConst [true]
,else
exprStmt BoolConst [false]
]
,then
exprStmt BoolConst [false]
,else
exprStmt BoolConst [true]
]
,then
exprStmt Binary [ADD, Var [x], NumConst [1]]
,else
exprStmt Binary [ADD, Var [x], NumConst [1000]]
]

DebugAction [StmtExpr [
if Binary [EQ, NumConst [6], Var [x]]
,then
exprStmt StringConst [Logic Ternary Op Test: success]
,else
exprStmt StringConst [Logic Ternary Op Test: FAIL]
]]

StmtTextComment [Logic Ternary Op -- End]
