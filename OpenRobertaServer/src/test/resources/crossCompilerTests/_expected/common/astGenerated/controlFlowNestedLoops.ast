StmtTextComment[textComment: Control Flow Nested Loop --Start]

(repeat [FOREVER, BoolConst[value: true]]
(repeat [UNTIL, Unary [NOT, Binary [GTE, Var [X], NumConst[value: 20]]]]
(repeat [FOR, Var [i], NumConst[value: 1], NumConst[value: 11], NumConst[value: 1]]
(repeat [TIMES, Var [k0], NumConst[value: 0], NumConst[value: 2], NumConst[value: 1]]
if FunctionExpr [MathNumPropFunct [EVEN, [Var [i]]]]
,thenStmtFlowCon[flow: CONTINUE]

exprStmt Binary [MATH_CHANGE, Var [X], NumConst[value: 1]]
)
)
)StmtFlowCon[flow: BREAK]
)
AssertStmt[asserts: Binary [EQ, NumConst[value: 20], Var [X]], msg: pos-1]

(repeat [FOR, Var [j], NumConst[value: 1], NumConst[value: 4], NumConst[value: 3]]
exprStmt Binary [MATH_CHANGE, Var [X], NumConst[value: 1]]AssertStmt[asserts: Binary [EQ, NumConst[value: 21], Var [X]], msg:  = X]
(repeat [FOR, Var [k], NumConst[value: 1], NumConst[value: 5], NumConst[value: 3]]
exprStmt Binary [MATH_CHANGE, Var [X], NumConst[value: 1]]
)
)
AssertStmt[asserts: Binary [EQ, NumConst[value: 23], Var [X]], msg: pos-2]

(repeat [FOREVER, BoolConst[value: true]]
(repeat [FOREVER, BoolConst[value: true]]
if Binary [EQ, NumConst[value: 23], Var [X]]
,then
(repeat [FOREVER, BoolConst[value: true]]
if FunctionExpr [MathNumPropFunct [EVEN, [Var [X]]]]
,thenStmtFlowCon[flow: CONTINUE]

exprStmt Binary [MATH_CHANGE, Var [X], NumConst[value: 1]]StmtFlowCon[flow: BREAK]
)
if FunctionExpr [MathNumPropFunct [EVEN, [Var [X]]]]
,thenStmtFlowCon[flow: BREAK]

exprStmt Binary [MATH_CHANGE, Var [X], NumConst[value: 1000]]
StmtFlowCon[flow: BREAK]
)StmtFlowCon[flow: BREAK]
)
DebugAction[value: TernaryExpr[condition: Binary [EQ, NumConst[value: 24], Var [X]], thenPart: StringConst[value: Control Flow Nested Loops Test:success], elsePart: StringConst[value: ntrol Flow Nested Loops Test: FAIL]]]

(repeat [FOREVER, BoolConst[value: true]]WaitStmt [
(repeat [WAIT, BoolConst[value: true]]StmtFlowCon[flow: BREAK]
)
(repeat [WAIT, BoolConst[value: true]]
)]
)
StmtTextComment[textComment: Control Flow Nested Loop -- End]
