AssertStmt [asserts pos-0: Binary [EQ, NumConst [0], Var [X]]]

if BoolConst [true]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1]]

AssertStmt [asserts pos-1: Binary [EQ, NumConst [1], Var [X]]]

if BoolConst [false]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1000]]

AssertStmt [asserts pos-2: Binary [EQ, NumConst [1], Var [X]]]

if BoolConst [true]
,then
if BoolConst [true]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1]]

exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1]]

AssertStmt [asserts pos-3: Binary [EQ, NumConst [3], Var [X]]]

if BoolConst [true]
,then
if BoolConst [false]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1000]]

exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1]]

AssertStmt [asserts pos-4: Binary [EQ, NumConst [4], Var [X]]]

if BoolConst [false]
,then
if BoolConst [false]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1000]]

exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1000]]

AssertStmt [asserts pos-5: Binary [EQ, NumConst [4], Var [X]]]

if BoolConst [false]
,then
if BoolConst [true]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1000]]

exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1000]]

AssertStmt [asserts pos-6: Binary [EQ, NumConst [4], Var [X]]]

if BoolConst [true]
,then
if BoolConst [true]
,then
if BoolConst [false]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1000]]

exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1]]

exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1]]

AssertStmt [asserts pos-7: Binary [EQ, NumConst [6], Var [X]]]

if BoolConst [true]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1]]
,else if BoolConst [false]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1000]]

AssertStmt [asserts pos-8: Binary [EQ, NumConst [7], Var [X]]]

if BoolConst [false]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1000]]
,else if BoolConst [true]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1]]

AssertStmt [asserts pos-9: Binary [EQ, NumConst [8], Var [X]]]

if BoolConst [true]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1]]
,else
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1000]]

AssertStmt [asserts pos-10: Binary [EQ, NumConst [9], Var [X]]]

if BoolConst [false]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1000]]
,else
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1]]

AssertStmt [asserts pos-11: Binary [EQ, NumConst [10], Var [X]]]

if BoolConst [true]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1]]
,else if BoolConst [true]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1000]]
,else
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1000]]

AssertStmt [asserts pos-12: Binary [EQ, NumConst [11], Var [X]]]

if BoolConst [false]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1000]]
,else if BoolConst [false]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1000]]
,else
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1]]

AssertStmt [asserts pos-13: Binary [EQ, NumConst [12], Var [X]]]

if BoolConst [true]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1]]
,else if BoolConst [false]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1000]]
,else
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1000]]

AssertStmt [asserts pos-14: Binary [EQ, NumConst [14], Var [X]]]

if BoolConst [false]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1000]]
,else if BoolConst [true]
,then
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1]]
,else
exprStmt Binary [MATH_CHANGE, Var [X], NumConst [1000]]

AssertStmt [asserts pos-15: Binary [EQ, NumConst [14], Var [X]]]
DebugAction [StmtExpr [
if Binary [EQ, NumConst [14], Var [X]]
,then
exprStmt StringConst [Control Flow Test: success]
,else
exprStmt StringConst [Control Flow Test: FAIL]
]]
