StmtTextComment[textComment: Math power -- Start --]

Var [result] := Binary [EQ, NumConst[value: 1], MathPowerFunct [POWER, [NumConst[value: 2], NumConst[value: 0]]]]

AssertStmt[asserts: Binary [EQ, BoolConst[value: true], Var [result]], msg: pos-1]

Var [result] := Binary [EQ, NumConst[value: 2], MathPowerFunct [POWER, [NumConst[value: 2], NumConst[value: 1]]]]

AssertStmt[asserts: Binary [EQ, BoolConst[value: true], Var [result]], msg: pos-2]

Var [result] := Binary [EQ, NumConst[value: 4], MathPowerFunct [POWER, [NumConst[value: 2], NumConst[value: 2]]]]

AssertStmt[asserts: Binary [EQ, BoolConst[value: true], Var [result]], msg: pos-3]

Var [result] := Binary [EQ, NumConst[value: 8], MathPowerFunct [POWER, [NumConst[value: 2], NumConst[value: 3]]]]

AssertStmt[asserts: Binary [EQ, BoolConst[value: true], Var [result]], msg: pos-4]

Var [result] := Binary [EQ, NumConst[value: -4], Unary [NEG, MathPowerFunct [POWER, [NumConst[value: 2], NumConst[value: 2]]]]]

AssertStmt[asserts: Binary [EQ, BoolConst[value: true], Var [result]], msg: pos-5]

Var [result] := Binary [EQ, NumConst[value: 4], MathPowerFunct [POWER, [NumConst[value: -2], NumConst[value: 2]]]]

AssertStmt[asserts: Binary [EQ, BoolConst[value: true], Var [result]], msg: pos-6]

Var [result] := Binary [EQ, Binary [MULTIPLY, MathPowerFunct [POWER, [NumConst[value: 2], NumConst[value: 2]]], MathPowerFunct [POWER, [NumConst[value: 2], NumConst[value: 3]]]], MathPowerFunct [POWER, [NumConst[value: 2], Binary [ADD, NumConst[value: 2], NumConst[value: 3]]]]]

AssertStmt[asserts: Binary [EQ, BoolConst[value: true], Var [result]], msg: pos-7]

Var [result] := Binary [EQ, Binary [MULTIPLY, MathPowerFunct [POWER, [NumConst[value: 2], NumConst[value: 2]]], MathPowerFunct [POWER, [NumConst[value: 3], NumConst[value: 2]]]], MathPowerFunct [POWER, [Binary [MULTIPLY, NumConst[value: 2], NumConst[value: 3]], NumConst[value: 2]]]]

AssertStmt[asserts: Binary [EQ, BoolConst[value: true], Var [result]], msg: pos-8]

Var [result] := Binary [EQ, MathPowerFunct [POWER, [MathPowerFunct [POWER, [NumConst[value: 2], NumConst[value: 2]]], NumConst[value: 3]]], MathPowerFunct [POWER, [NumConst[value: 2], Binary [MULTIPLY, NumConst[value: 2], NumConst[value: 3]]]]]

AssertStmt[asserts: Binary [EQ, BoolConst[value: true], Var [result]], msg: pos-9]

Var [result] := Binary [EQ, Binary [DIVIDE, MathPowerFunct [POWER, [NumConst[value: 2], NumConst[value: 2]]], MathPowerFunct [POWER, [NumConst[value: 3], NumConst[value: 2]]]], MathPowerFunct [POWER, [Binary [DIVIDE, NumConst[value: 2], NumConst[value: 3]], NumConst[value: 2]]]]

AssertStmt[asserts: Binary [EQ, BoolConst[value: true], Var [result]], msg: pos-10]

Var [result] := Binary [EQ, Binary [DIVIDE, MathPowerFunct [POWER, [NumConst[value: 2], NumConst[value: 2]]], MathPowerFunct [POWER, [NumConst[value: 2], NumConst[value: 3]]]], MathPowerFunct [POWER, [NumConst[value: 2], Binary [MINUS, NumConst[value: 2], NumConst[value: 3]]]]]

AssertStmt[asserts: Binary [EQ, BoolConst[value: true], Var [result]], msg: pos-11]
DebugAction[value: TernaryExpr[condition: Binary [EQ, BoolConst[value: true], Var [result]], thenPart: StringConst[value: Math Power Test: success], elsePart: StringConst[value: Basic Math Test: FAIL]]]
StmtTextComment[textComment: Math power -- End --]
