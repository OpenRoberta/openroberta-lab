
StmtTextComment [Control Flow Loop -- Start]
AssertStmt [asserts pos-0: Binary [EQ, NumConst [0], Var [x]]]

(repeat [TIMES, Var [k0], NumConst [0], NumConst [5], NumConst [1]]
Var [x] := Binary [ADD, Var [x], NumConst [1]]

)
AssertStmt [asserts pos-1: Binary [EQ, NumConst [5], Var [x]]]

(repeat [UNTIL, Unary [NOT, Binary [EQ, Var [x], NumConst [10]]]]
Var [x] := Binary [ADD, Var [x], NumConst [1]]

)
AssertStmt [asserts pos-2: Binary [EQ, NumConst [10], Var [x]]]

(repeat [WHILE, Binary [LT, Var [x], NumConst [15]]]
Var [x] := Binary [ADD, Var [x], NumConst [1]]

)
AssertStmt [asserts pos-3: Binary [EQ, NumConst [15], Var [x]]]

(repeat [FOR, Var [i], NumConst [1], NumConst [6], NumConst [1]]
Var [x] := Binary [ADD, Var [x], NumConst [1]]

)
AssertStmt [asserts pos-4: Binary [EQ, NumConst [20], Var [x]]]

(repeat [FOR, Var [j], NumConst [2], NumConst [5], NumConst [3]]
Var [x] := Binary [ADD, Var [x], NumConst [1]]

)
AssertStmt [asserts pos-5: Binary [EQ, NumConst [21], Var [x]]]

(repeat [FOR, Var [k], NumConst [2], NumConst [6], NumConst [3]]
Var [x] := Binary [ADD, Var [x], NumConst [1]]

)
AssertStmt [asserts pos-6: Binary [EQ, NumConst [23], Var [x]]]

(repeat [FOR, Var [o], NumConst [2], NumConst [7], NumConst [3]]
Var [x] := Binary [ADD, Var [x], NumConst [1]]

)
AssertStmt [asserts pos-7: Binary [EQ, NumConst [25], Var [x]]]

(repeat [FOR, Var [p], NumConst [10], NumConst [9], NumConst [-1]]
Var [x] := Binary [ADD, Var [x], NumConst [1]]

)
AssertStmt [asserts pos-8: Binary [EQ, NumConst [25], Var [x]]]

(repeat [FOR, Var [m], NumConst [1], NumConst [5], Var [y]]
Var [y] := Binary [ADD, Var [y], NumConst [1]]

Var [x] := Binary [ADD, Var [x], NumConst [1]]

)
AssertStmt [asserts pos-9: Binary [EQ, NumConst [27], Var [x]]]

(repeat [FOREVER, BoolConst [true]]
if Binary [LT, Var [x], NumConst [30]]
,then
Var [x] := Binary [ADD, Var [x], NumConst [1]]

if BoolConst [true]
,then
StmtFlowCon [CONTINUE]

Var [x] := Binary [ADD, Var [x], NumConst [1000]]

,else if Binary [GTE, Var [x], NumConst [30]]
,then
StmtFlowCon [BREAK]

)
AssertStmt [asserts pos-10: Binary [EQ, NumConst [30], Var [x]]]
DebugAction [StmtExpr [
if Binary [EQ, Var [x], NumConst [30]]
,then
exprStmt StringConst [Control Flow Loops: success]
,else
exprStmt StringConst [Control Flow Loops: FAIL]
]]

StmtTextComment [Control Flow Loop -- End]
