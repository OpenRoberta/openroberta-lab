StmtTextComment[textComment: Control Flow Loop -- Start]
AssertStmt[asserts: Binary [EQ, NumConst[value: 0], Var [x]], msg: pos-0]

(repeat [TIMES, Var [k0], NumConst[value: 0], NumConst[value: 5], NumConst[value: 1]]
Var [x] := Binary [ADD, Var [x], NumConst[value: 1]]

)
AssertStmt[asserts: Binary [EQ, NumConst[value: 5], Var [x]], msg: pos-1]

(repeat [UNTIL, Unary [NOT, Binary [EQ, Var [x], NumConst[value: 10]]]]
Var [x] := Binary [ADD, Var [x], NumConst[value: 1]]

)
AssertStmt[asserts: Binary [EQ, NumConst[value: 10], Var [x]], msg: pos-2]

(repeat [WHILE, Binary [LT, Var [x], NumConst[value: 15]]]
Var [x] := Binary [ADD, Var [x], NumConst[value: 1]]

)
AssertStmt[asserts: Binary [EQ, NumConst[value: 15], Var [x]], msg: pos-3]

(repeat [FOR, Var [i], NumConst[value: 1], NumConst[value: 6], NumConst[value: 1]]
Var [x] := Binary [ADD, Var [x], NumConst[value: 1]]

)
AssertStmt[asserts: Binary [EQ, NumConst[value: 20], Var [x]], msg: pos-4]

(repeat [FOR, Var [j], NumConst[value: 2], NumConst[value: 5], NumConst[value: 3]]
Var [x] := Binary [ADD, Var [x], NumConst[value: 1]]

)
AssertStmt[asserts: Binary [EQ, NumConst[value: 21], Var [x]], msg: pos-5]

(repeat [FOR, Var [k], NumConst[value: 2], NumConst[value: 6], NumConst[value: 3]]
Var [x] := Binary [ADD, Var [x], NumConst[value: 1]]

)
AssertStmt[asserts: Binary [EQ, NumConst[value: 23], Var [x]], msg: pos-6]

(repeat [FOR, Var [o], NumConst[value: 2], NumConst[value: 7], NumConst[value: 3]]
Var [x] := Binary [ADD, Var [x], NumConst[value: 1]]

)
AssertStmt[asserts: Binary [EQ, NumConst[value: 25], Var [x]], msg: pos-7]

(repeat [FOR, Var [p], NumConst[value: 10], NumConst[value: 9], NumConst[value: -1]]
Var [x] := Binary [ADD, Var [x], NumConst[value: 1]]

)
AssertStmt[asserts: Binary [EQ, NumConst[value: 25], Var [x]], msg: pos-8]

(repeat [FOR, Var [m], NumConst[value: 1], NumConst[value: 5], Var [y]]
Var [y] := Binary [ADD, Var [y], NumConst[value: 1]]

Var [x] := Binary [ADD, Var [x], NumConst[value: 1]]

)
AssertStmt[asserts: Binary [EQ, NumConst[value: 27], Var [x]], msg: pos-9]

(repeat [FOREVER, BoolConst[value: true]]
if Binary [LT, Var [x], NumConst[value: 30]]
,then
Var [x] := Binary [ADD, Var [x], NumConst[value: 1]]

if BoolConst[value: true]
,thenStmtFlowCon[flow: CONTINUE]

Var [x] := Binary [ADD, Var [x], NumConst[value: 1000]]

,else if Binary [GTE, Var [x], NumConst[value: 30]]
,thenStmtFlowCon[flow: BREAK]

)
AssertStmt[asserts: Binary [EQ, NumConst[value: 30], Var [x]], msg: pos-10]
DebugAction[value: TernaryExpr[condition: Binary [EQ, Var [x], NumConst[value: 30]], thenPart: StringConst[value: Control Flow Loops: success], elsePart: StringConst[value: Control Flow Loops: FAIL]]]
StmtTextComment[textComment: Control Flow Loop -- End]
