// This file is automatically generated by the Open Roberta Lab.

#define ANALOG2PERCENT 0.0978

#include <MeMCore.h>
#include <MeDrive.h>
#include <NEPODefs.h>

MeLEDMatrix __meLEDMatrix_1(1);


void math();
void lists();

inline bool _isPrime(double d);
const std::vector<uint8_t> __ledMatrix0 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
const std::vector<uint8_t> __ledMatrix1 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
const std::vector<uint8_t> __ledMatrix2 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
const std::vector<uint8_t> __ledMatrix3 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};

double ___numVar;
bool ___boolVar;
String ___stringVar;
unsigned int ___colourVar;
std::vector<uint8_t> ___imageVar;
std::list<double> ___numList;
std::list<bool> ___boolList;
std::list<String> ___stringList;
std::list<unsigned int> ___colourList;
std::list<std::vector<uint8_t>> ___imageList;


void math() {
    drawStrLEDMatrix(&__meLEDMatrix_1, String(___numVar + ___numVar), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(___numVar - ___numVar), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(___numVar * ___numVar), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(___numVar / ((float) ___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(pow(___numVar, ___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(sqrt(___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(abs(___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(- (___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(log(___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(log10(___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(exp(___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(pow(10.0, ___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(sin(M_PI / 180.0 * (___numVar))), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(cos(M_PI / 180.0 * (___numVar))), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(tan(M_PI / 180.0 * (___numVar))), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(180.0 / M_PI * asin(___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(180.0 / M_PI * acos(___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(180.0 / M_PI * atan(___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(M_PI), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(M_E), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(M_GOLDEN_RATIO), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(M_SQRT2), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(M_SQRT1_2), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(M_INFINITY), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String((fmod(___numVar, 2) == 0)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String((fmod(___numVar, 2) != 0)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_isPrime(___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String((___numVar == floor(___numVar))), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String((___numVar > 0)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String((___numVar < 0)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String((fmod(___numVar,___numVar) == 0)), 100);
    ___numVar += ___numVar;
    drawStrLEDMatrix(&__meLEDMatrix_1, String(round(___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(ceil(___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(floor(___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_getListSum(___numList)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_getListMin(___numList)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_getListMax(___numList)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_getListAverage(___numList)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_getListMedian(___numList)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_getListStandardDeviation(___numList)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_getListElementByIndex(___numList, 0)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(fmod(___numVar, ___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(std::min(std::max((double) ___numVar, (double) ___numVar), (double) ___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_randomIntegerInRange(___numVar, ___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(((double) rand() / (RAND_MAX))), 100);
}

void lists() {
    ___numList = {};
    ___numList = {0, 0, 0};
    ___numList = _createListRepeat(___numVar, (double) ___numVar);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(___numVar), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(___numList.empty()), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_getFirstOccuranceOfElement(___numList, ___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_getLastOccuranceOfElement(___numList, ___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_getListElementByIndex(___numList, ___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_getListElementByIndex(___numList, ___numList.size() - 1 - ___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_getListElementByIndex(___numList, 0)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_getListElementByIndex(___numList, ___numList.size() - 1)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_getAndRemoveListElementByIndex(___numList, ___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_getAndRemoveListElementByIndex(___numList, ___numList.size() - 1 - ___numVar)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_getAndRemoveListElementByIndex(___numList, 0)), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_getAndRemoveListElementByIndex(___numList, ___numList.size() - 1)), 100);
    _removeListElementByIndex(___numList, ___numList.size() - 1 - ___numVar);
    _removeListElementByIndex(___numList, ___numList.size() - 1 - ___numVar);
    _removeListElementByIndex(___numList, 0);
    _removeListElementByIndex(___numList, ___numList.size() - 1);
    _setListElementByIndex(___numList, ___numVar, ___numVar);
    _setListElementByIndex(___numList, ___numList.size() - 1 - ___numVar, ___numVar);
    _setListElementByIndex(___numList, 0, ___numVar);
    _setListElementByIndex(___numList, ___numList.size() - 1, ___numVar);
    _insertListElementBeforeIndex(___numList, ___numVar, ___numVar);
    _insertListElementBeforeIndex(___numList, ___numList.size() - 1 - ___numVar, ___numVar);
    _insertListElementBeforeIndex(___numList, 0, ___numVar);
    ___numList.push_back(___numVar);
    ___numList = _getSubList(___numList, ___numVar, ___numVar);
    ___numList = _getSubList(___numList, ___numVar, ___numList.size() - 1 - ___numVar);
    ___numList = _getSubList(___numList, ___numVar, ___numList.size() - 1);
    ___numList = _getSubList(___numList, ___numList.size() - 1 - ___numVar, ___numVar);
    ___numList = _getSubList(___numList, ___numList.size() - 1 - ___numVar, ___numList.size() - 1 - ___numVar);
    ___numList = _getSubList(___numList, ___numList.size() - 1 - ___numVar, ___numList.size() - 1);
    ___numList = _getSubList(___numList, 0, ___numVar);
    ___numList = _getSubList(___numList, 0, ___numList.size() - 1 - ___numVar);
    ___numList = _getSubList(___numList, 0, ___numList.size() - 1);
}

void setup()
{
    Serial.begin(9600);
    ___numVar = 0;
    ___boolVar = true;
    ___stringVar = "";
    ___colourVar = RGB(0xFF, 0xFF, 0xFF);
    ___imageVar = __ledMatrix0;
    ___numList = {0, 0, 0};
    ___boolList = {true, true, true};
    ___stringList = {"", "", ""};
    ___colourList = {RGB(0xFF, 0xFF, 0xFF), RGB(0xFF, 0xFF, 0xFF), RGB(0xFF, 0xFF, 0xFF)};
    ___imageList = {__ledMatrix1, __ledMatrix2, __ledMatrix3};
}

void loop()
{
    math();
    lists();
}
inline bool _isPrime(double d) {
    if (!(d == floor(d))) {
        return false;
    }
    int n = (int)d;
    if (n < 2) {
        return false;
    }
    if (n == 2) {
        return true;
    }
    if (n % 2 == 0) {
        return false;
    }
    for (int i = 3, s = (int)(sqrt(d) + 1); i <= s; i += 2) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}
