// This file is automatically generated by the Open Roberta Lab.
#define _ARDUINO_STL_NOT_NEEDED
#include "SenseBoxMCU.h"
#undef max
#undef min
#include <NEPODefs.h>
#include <stdlib.h>
#include <bsec.h>
#define _readIaq(X, Y) ((X.run()) ? Y : Y)
#include <Wire.h>



void ____sensors();
void ____sensorsWaitUntil();


double ___numVar;
bool ___boolVar;
String ___stringVar;
unsigned int ___colourVar;
std::list<double> ___numList;
std::list<bool> ___boolList;
std::list<String> ___stringList;
std::list<unsigned int> ___colourList;
int _input_S3 = 2;
int _mic_S4 = 1;
SDS011 _sds011_S5(Serial1);

BMX055 _bmx055_B;
int _getValueFromBmx(int axis, int mode) {
    int _x_axis;
    int _y_axis;
    int _z_axis;
    switch (mode) {
        case 1:
            _bmx055_B.getRotation(&_x_axis, &_y_axis, &_z_axis);
            break;
        case 2:
            _bmx055_B.getMagnet(&_x_axis, &_y_axis, &_z_axis);
            break;
    }
    switch (axis) {
        case 1:
            return _x_axis;
        case 2:
            return _y_axis;
        case 3:
            return _z_axis;
    }
}

HDC1080 _hdc1080_H;
GPS _gps_G2;
int _output_L = 5;
int _potentiometer_P = 3;
int _button_B3 = 6;
BMP280 _bmp280_T;
Bsec _iaqSensor_U;
VEML6070 _veml_V;
TSL45315 _tsl_V;
int _input_S2 = 4;
unsigned long __time_1 = millis();


void ____sensors() {
    Serial.println(analogRead(_input_S3));
    Serial.println(digitalRead(_input_S2));
    Serial.println(digitalRead(_button_B3));
    Serial.println(analogRead(_output_L)/10.24);
    Serial.println(((double)analogRead(_potentiometer_P))*5/1024);
    Serial.println(get_microphone_volume(_mic_S4));
    Serial.println(_hdc1080_H.getHumidity());
    Serial.println(_hdc1080_H.getTemperature());
    Serial.println(_bmp280_T.getTemperature());
    Serial.println(_bmp280_T.getPressure());
    Serial.println(_tsl_V.getIlluminance());
    Serial.println(_veml_V.getUvIntensity());
    Serial.println(_bmx055_B.getAccelerationX());
    Serial.println(_bmx055_B.getAccelerationY());
    Serial.println(_bmx055_B.getAccelerationZ());
    Serial.println(_sds011_S5.getPm25());
    Serial.println(_sds011_S5.getPm10());
    Serial.println(_gps_G2.getLatitude());
    Serial.println(_gps_G2.getLongitude());
    Serial.println(_gps_G2.getAltitude());
    Serial.println(_gps_G2.getSpeed());
    Serial.println(_gps_G2.getDate());
    Serial.println(_gps_G2.getTime());
    Serial.println((int) (millis() - __time_1));
    __time_1 = millis();
}

void ____sensorsWaitUntil() {
    while (true) {
        if ( digitalRead(_button_B3) == true ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( analogRead(_output_L)/10.24 < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( ((double)analogRead(_potentiometer_P))*5/1024 < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( get_microphone_volume(_mic_S4) > 50 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _hdc1080_H.getHumidity() < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _hdc1080_H.getTemperature() < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _bmp280_T.getTemperature() < 20 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _bmp280_T.getPressure() < 101325 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _tsl_V.getIlluminance() > 500 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _veml_V.getUvIntensity() > 50 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _bmx055_B.getAccelerationX() < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _bmx055_B.getAccelerationY() < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _bmx055_B.getAccelerationZ() < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _sds011_S5.getPm25() < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _sds011_S5.getPm10() < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _gps_G2.getLatitude() < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _gps_G2.getLongitude() < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _gps_G2.getAltitude() < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _gps_G2.getSpeed() < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _gps_G2.getDate() < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _gps_G2.getTime() < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( (int) (millis() - __time_1) > 500 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _readIaq(_iaqSensor_U, _iaqSensor_U.temperature) < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _readIaq(_iaqSensor_U, _iaqSensor_U.humidity) < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _readIaq(_iaqSensor_U, _iaqSensor_U.pressure) < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _readIaq(_iaqSensor_U, _iaqSensor_U.iaq) < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _readIaq(_iaqSensor_U, _iaqSensor_U.iaqAccuracy) < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _readIaq(_iaqSensor_U, _iaqSensor_U.co2Equivalent) < 30 ) {
            break;
        }
        delay(1);
    }
    while (true) {
        if ( _readIaq(_iaqSensor_U, _iaqSensor_U.breathVocEquivalent) < 30 ) {
            break;
        }
        delay(1);
    }
}

void setup()
{
    Serial.begin(9600);

    pinMode(_input_S3, INPUT);
    Serial1.begin(9600);
    _bmx055_B.beginAcc(0x03);
    _hdc1080_H.begin();
    _gps_G2.begin();
    pinMode(_button_B3, INPUT);
    _bmp280_T.begin();
    Wire.begin();
    _iaqSensor_U.begin(BME680_I2C_ADDR_PRIMARY, Wire);
    bsec_virtual_sensor_t _sensorList[10] = {
        BSEC_OUTPUT_RAW_TEMPERATURE,
        BSEC_OUTPUT_RAW_PRESSURE,
        BSEC_OUTPUT_RAW_HUMIDITY,
        BSEC_OUTPUT_RAW_GAS,
        BSEC_OUTPUT_IAQ,
        BSEC_OUTPUT_STATIC_IAQ,
        BSEC_OUTPUT_CO2_EQUIVALENT,
        BSEC_OUTPUT_BREATH_VOC_EQUIVALENT,
        BSEC_OUTPUT_SENSOR_HEAT_COMPENSATED_TEMPERATURE,
        BSEC_OUTPUT_SENSOR_HEAT_COMPENSATED_HUMIDITY,
    };
    _iaqSensor_U.updateSubscription(_sensorList, 10, BSEC_SAMPLE_RATE_LP);
    _veml_V.begin();
    _tsl_V.begin();
    pinMode(_input_S2, INPUT);
    ___numVar = 0;
    ___boolVar = true;
    ___stringVar = "";
    ___colourVar = RGB(0xFF, 0xFF, 0xFF);
    ___numList = {0, 0, 0};
    ___boolList = {true, true, true};
    ___stringList = {"", "", ""};
    ___colourList = {RGB(0xFF, 0xFF, 0xFF), RGB(0xFF, 0xFF, 0xFF), RGB(0xFF, 0xFF, 0xFF)};
}

void loop()
{
    ____sensors();
    ____sensorsWaitUntil();
}