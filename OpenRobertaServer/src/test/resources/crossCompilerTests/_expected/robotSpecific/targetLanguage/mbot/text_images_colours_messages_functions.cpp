// This file is automatically generated by the Open Roberta Lab.

#define ANALOG2PERCENT 0.0978

#include <MeMCore.h>
#include <MeDrive.h>
#include <NEPODefs.h>

MeLEDMatrix __meLEDMatrix_1(1);
MeRGBLed _meRgbLed(7, 2);
int _v_colour_temp;
MeIR _meIr;


void ____text();
void ____images();
void ____colour();
void ____messages();
void ____doSomething(double ___x, bool ___x2, String ___x3, unsigned int ___x4, std::vector<uint8_t> ___x5, std::list<double> ___x6, std::list<bool> ___x7, std::list<String> ___x8, std::list<unsigned int> ___x9, std::list<std::vector<uint8_t>> ___x10);
double ____function_return_numberVar();
bool ____function_return_booleanVar();
String ____function_return_stringVar();
unsigned int ____function_return_colourVar();
std::vector<uint8_t> ____function_return_imageVar();
std::list<double> ____function_return_numberList();
std::list<bool> ____function_return_booleanList();
std::list<String> ____function_return_stringList();
std::list<unsigned int> ____function_return_colourList();
std::list<std::vector<uint8_t>> ____function_return_imageList();
const std::vector<uint8_t> __ledMatrix0 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
const std::vector<uint8_t> __ledMatrix1 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
const std::vector<uint8_t> __ledMatrix2 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
const std::vector<uint8_t> __ledMatrix3 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
const std::vector<uint8_t> __ledMatrix4 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};

double ___numVar;
bool ___boolVar;
String ___stringVar;
unsigned int ___colourVar;
std::vector<uint8_t> ___imageVar;
std::list<double> ___numList;
std::list<bool> ___boolList;
std::list<String> ___stringList;
std::list<unsigned int> ___colourList;
std::list<std::vector<uint8_t>> ___imageList;


void ____text() {
    drawStrLEDMatrix(&__meLEDMatrix_1, "", 100);
    ___stringVar += ___stringVar;
}

void ____images() {
    ___imageVar = __ledMatrix1;
    ___imageVar = (shiftLEDMatrixUpVec(___imageVar, ___numVar));
    ___imageVar = (shiftLEDMatrixDownVec(___imageVar, ___numVar));
    ___imageVar = (shiftLEDMatrixRightVec(___imageVar, ___numVar));
    ___imageVar = (shiftLEDMatrixLeftVec(___imageVar, ___numVar));
    ___imageVar = (invertLEDMatrixVec(___imageVar));
}

void ____colour() {
    ___colourVar = RGB(0x00, 0x00, 0x00);
    ___colourVar = RGB(0x33, 0x33, 0x33);
    ___colourVar = RGB(0x66, 0x66, 0x66);
    ___colourVar = RGB(0x99, 0x99, 0x99);
    ___colourVar = RGB(0xc0, 0xc0, 0xc0);
    ___colourVar = RGB(0xcc, 0xcc, 0xcc);
    ___colourVar = RGB(0xff, 0xff, 0xff);
    ___colourVar = RGB(0x33, 0x00, 0x00);
    ___colourVar = RGB(0x66, 0x00, 0x00);
    ___colourVar = RGB(0x99, 0x00, 0x00);
    ___colourVar = RGB(0xcc, 0x00, 0x00);
    ___colourVar = RGB(0xff, 0x00, 0x00);
    ___colourVar = RGB(0xff, 0x66, 0x66);
    ___colourVar = RGB(0xff, 0xcc, 0xcc);
    ___colourVar = RGB(0x66, 0x33, 0x00);
    ___colourVar = RGB(0x99, 0x33, 0x00);
    ___colourVar = RGB(0xcc, 0x66, 0x00);
    ___colourVar = RGB(0xff, 0x66, 0x00);
    ___colourVar = RGB(0xff, 0x99, 0x00);
    ___colourVar = RGB(0xff, 0x99, 0x66);
    ___colourVar = RGB(0xff, 0xcc, 0x99);
    ___colourVar = RGB(0x66, 0x33, 0x33);
    ___colourVar = RGB(0x99, 0x66, 0x33);
    ___colourVar = RGB(0xcc, 0x99, 0x33);
    ___colourVar = RGB(0xff, 0xcc, 0x33);
    ___colourVar = RGB(0xff, 0xcc, 0x66);
    ___colourVar = RGB(0xff, 0xff, 0x66);
    ___colourVar = RGB(0xff, 0xff, 0x99);
    ___colourVar = RGB(0x33, 0x33, 0x00);
    ___colourVar = RGB(0x66, 0x66, 0x00);
    ___colourVar = RGB(0x99, 0x99, 0x00);
    ___colourVar = RGB(0xff, 0xcc, 0x00);
    ___colourVar = RGB(0xff, 0xff, 0x00);
    ___colourVar = RGB(0xff, 0xff, 0x33);
    ___colourVar = RGB(0xff, 0xff, 0xcc);
    ___colourVar = RGB(0x00, 0x33, 0x00);
    ___colourVar = RGB(0x00, 0x66, 0x00);
    ___colourVar = RGB(0x00, 0x99, 0x00);
    ___colourVar = RGB(0x33, 0xcc, 0x00);
    ___colourVar = RGB(0x33, 0xff, 0x33);
    ___colourVar = RGB(0x66, 0xff, 0x99);
    ___colourVar = RGB(0x99, 0xff, 0x99);
    ___colourVar = RGB(0x00, 0x33, 0x33);
    ___colourVar = RGB(0x33, 0x66, 0x66);
    ___colourVar = RGB(0x33, 0x99, 0x99);
    ___colourVar = RGB(0x00, 0xcc, 0xcc);
    ___colourVar = RGB(0x66, 0xcc, 0xcc);
    ___colourVar = RGB(0x33, 0xff, 0xff);
    ___colourVar = RGB(0x00, 0x00, 0x66);
    ___colourVar = RGB(0x00, 0x00, 0x99);
    ___colourVar = RGB(0x33, 0x33, 0xff);
    ___colourVar = RGB(0x33, 0x66, 0xff);
    ___colourVar = RGB(0x33, 0xcc, 0xff);
    ___colourVar = RGB(0x66, 0xff, 0xff);
    ___colourVar = RGB(0xcc, 0xff, 0xff);
    ___colourVar = RGB(0x33, 0x00, 0x99);
    ___colourVar = RGB(0x33, 0x33, 0x99);
    ___colourVar = RGB(0x66, 0x00, 0xcc);
    ___colourVar = RGB(0x66, 0x33, 0xff);
    ___colourVar = RGB(0x66, 0x66, 0xcc);
    ___colourVar = RGB(0x99, 0x99, 0xff);
    ___colourVar = RGB(0xcc, 0xcc, 0xff);
    ___colourVar = RGB(0x33, 0x00, 0x33);
    ___colourVar = RGB(0x66, 0x33, 0x66);
    ___colourVar = RGB(0x99, 0x33, 0x99);
    ___colourVar = RGB(0xcc, 0x33, 0xcc);
    ___colourVar = RGB(0xcc, 0x66, 0xcc);
    ___colourVar = RGB(0xff, 0x99, 0xff);
    ___colourVar = RGB(0xff, 0xcc, 0xff);
    ___colourVar = RGB(___numVar, ___numVar, ___numVar);
}

void ____messages() {
    _meIr.sendString(___stringVar);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(_meIr.getString()), 100);
}

void ____doSomething(double ___x, bool ___x2, String ___x3, unsigned int ___x4, std::vector<uint8_t> ___x5, std::list<double> ___x6, std::list<bool> ___x7, std::list<String> ___x8, std::list<unsigned int> ___x9, std::list<std::vector<uint8_t>> ___x10) {
    if (___boolVar) return ;
}

double ____function_return_numberVar() {
    return ___numVar;
}

bool ____function_return_booleanVar() {
    return ___boolVar;
}

String ____function_return_stringVar() {
    return ___stringVar;
}

unsigned int ____function_return_colourVar() {
    return ___colourVar;
}

std::vector<uint8_t> ____function_return_imageVar() {
    return ___imageVar;
}

std::list<double> ____function_return_numberList() {
    return ___numList;
}

std::list<bool> ____function_return_booleanList() {
    return ___boolList;
}

std::list<String> ____function_return_stringList() {
    return ___stringList;
}

std::list<unsigned int> ____function_return_colourList() {
    return ___colourList;
}

std::list<std::vector<uint8_t>> ____function_return_imageList() {
    return ___imageList;
}

void setup()
{
    Serial.begin(9600);
    ___numVar = 0;
    ___boolVar = true;
    ___stringVar = "";
    ___colourVar = RGB(0xFF, 0xFF, 0xFF);
    ___imageVar = __ledMatrix0;
    ___numList = {0, 0, 0};
    ___boolList = {true, true, true};
    ___stringList = {"", "", ""};
    ___colourList = {RGB(0xFF, 0xFF, 0xFF), RGB(0xFF, 0xFF, 0xFF), RGB(0xFF, 0xFF, 0xFF)};
    ___imageList = {__ledMatrix2, __ledMatrix3, __ledMatrix4};
}

void loop()
{
    ____text();
    ____colour();
    ____images();
    ____messages();
    ____doSomething(___numVar, ___boolVar, ___stringVar, ___colourVar, ___imageVar, ___numList, ___boolList, ___stringList, ___colourList, ___imageList);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(____function_return_numberVar()), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(____function_return_booleanVar()), 100);
    drawStrLEDMatrix(&__meLEDMatrix_1, String(____function_return_stringVar()), 100);
    _meRgbLed.setColor(2, 0x00, 0xcc, 0xcc);
    _meRgbLed.show();
    __meLEDMatrix_1.drawBitmap(0, 0, 16, &____function_return_imageVar()[0]);
    ___numList = ____function_return_numberList();
    ___boolList = ____function_return_booleanList();
    ___stringList = ____function_return_stringList();
    ___colourList = ____function_return_colourList();
    ___imageList = ____function_return_imageList();
}