SerialWriteAction[value: StringConst[value: Camera Tests]]
SerialWriteAction[value: StringConst[value: Press right display button to switch to next Detector]]
SerialWriteAction[value: StringConst[value: Config Settings are 30, Orange, 2]]
SerialWriteAction[value: StringConst[value: Camera Color]]

(repeat [FOREVER, BoolConst[value: true]]
AktionStmt [SerialWriteAction[value: SensorExpr [ColorSensor [C, COLOUR, - EMPTY_SLOT -]]]]WaitTimeStmt[time: NumConst[value: 200]]
if SensorExpr [TouchKeySensor [RIGHT, PRESSED, - EMPTY_SLOT -]]
,thenStmtFlowCon[flow: BREAK]

)
SerialWriteAction[value: StringConst[value: Camera Color compared to red]]
WaitTimeStmt[time: NumConst[value: 300]]

(repeat [FOREVER, BoolConst[value: true]]
AktionStmt [SerialWriteAction[value: ActionExpr [ColourCompare[op: EQ, colour1: SensorExpr [ColorSensor [C, COLOUR, - EMPTY_SLOT -]], colour2: ColorConst[hexValue: #ff0000], tolerance: NumConst[value: 50]]]]]WaitTimeStmt[time: NumConst[value: 200]]
if SensorExpr [TouchKeySensor [RIGHT, PRESSED, - EMPTY_SLOT -]]
,thenStmtFlowCon[flow: BREAK]

)
SerialWriteAction[value: StringConst[value: Line Information]]
WaitTimeStmt[time: NumConst[value: 300]]

(repeat [FOREVER, BoolConst[value: true]]
AktionStmt [SerialWriteAction[value: FunctionExpr [TextJoinFunct [StringConst[value: Number of lines: ], SensorExpr [CameraLineSensor [C, NUMBERLINES, - EMPTY_SLOT -]]]]]]
AktionStmt [SerialWriteAction[value: FunctionExpr [TextJoinFunct [StringConst[value: Color of first line: ], SensorExpr [CameraLineColourSensor[mode: COLOUR, port: - EMPTY_PORT -, lineId: NumConst[value: 0]]]]]]]
AktionStmt [SerialWriteAction[value: StringConst[value: Position and Width of line 0]]]
(repeat [FOR_EACH, Binary [IN, VarDeclaration [NUMBER, item, EmptyExpr [defVal=NUMBER], false, false], SensorExpr [CameraLineInformationSensor[mode: INFORMATION, port: - EMPTY_PORT -, lineId: NumConst[value: 0]]]]]
AktionStmt [SerialWriteAction[value: Var [item]]]
)WaitTimeStmt[time: NumConst[value: 200]]
if SensorExpr [TouchKeySensor [RIGHT, PRESSED, - EMPTY_SLOT -]]
,thenStmtFlowCon[flow: BREAK]

)
SerialWriteAction[value: StringConst[value: Ball Information]]
WaitTimeStmt[time: NumConst[value: 300]]

(repeat [FOREVER, BoolConst[value: true]]
AktionStmt [SerialWriteAction[value: FunctionExpr [TextJoinFunct [StringConst[value: X: ], FunctionExpr [ListGetIndex [GET, FROM_START, [SensorExpr [CameraBallSensor [C, BALL, - EMPTY_SLOT -]], NumConst[value: 0]]]]]]]]
AktionStmt [SerialWriteAction[value: FunctionExpr [TextJoinFunct [StringConst[value: Y: ], FunctionExpr [ListGetIndex [GET, FROM_START, [SensorExpr [CameraBallSensor [C, BALL, - EMPTY_SLOT -]], NumConst[value: 1]]]]]]]]
AktionStmt [SerialWriteAction[value: FunctionExpr [TextJoinFunct [StringConst[value: Diameter: ], FunctionExpr [ListGetIndex [GET, FROM_START, [SensorExpr [CameraBallSensor [C, BALL, - EMPTY_SLOT -]], NumConst[value: 2]]]]]]]]WaitTimeStmt[time: NumConst[value: 200]]
if SensorExpr [TouchKeySensor [RIGHT, PRESSED, - EMPTY_SLOT -]]
,thenStmtFlowCon[flow: BREAK]

)
SerialWriteAction[value: StringConst[value: Motion]]
WaitTimeStmt[time: NumConst[value: 300]]

(repeat [FOREVER, BoolConst[value: true]]
AktionStmt [SerialWriteAction[value: SensorExpr [MotionSensor [C, MOTION, - EMPTY_SLOT -]]]]WaitTimeStmt[time: NumConst[value: 200]]
if SensorExpr [TouchKeySensor [RIGHT, PRESSED, - EMPTY_SLOT -]]
,thenStmtFlowCon[flow: BREAK]

)
SerialWriteAction[value: StringConst[value: DONE]]
WaitTimeStmt[time: NumConst[value: 500]]
