package de.fhg.iais.roberta.typecheck;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

import org.json.JSONObject;

import de.fhg.iais.roberta.syntax.Phrase;
import de.fhg.iais.roberta.util.ast.TextRegion;
import de.fhg.iais.roberta.util.dbc.DbcException;
import de.fhg.iais.roberta.util.visitor.IInfoCollectable;

/**
 * This class is a visitor and responsible for processing the infos generated (and stored in the Phrases) during validation and typechecking for an AST.
 * It does this by traversing the AST using <b>reflection</b>. Be careful when changing this visitor and when changing the overall structure of an AST.
 */
public class NepoInfoProcessor {

    private final List<NepoInfo> infos = new ArrayList<>();
    private final List<JSONObject> textlyErrors = new ArrayList<>();
    private boolean deleteOldInfo;
    private boolean collectTextlyErrors;
    private static final String TYPECHECK_ERROR_KEY = "PROGRAM_ERROR_EXPRBLOCK_TYPECHECK";
    private TextRegion lastValidTextRegion;

    /**
     * initialize the info collector visitor.
     */
    private NepoInfoProcessor(boolean deleteOldInfo, boolean collectTextlyErrors) {
        this.deleteOldInfo = deleteOldInfo;
        this.collectTextlyErrors = collectTextlyErrors;
    }

    /**
     * collect the infos (of type info and type error) generated (and stored in the Phrases) during validation and typechecking for an AST
     *
     * @param phrase whose infos should be collected
     * @return list of collected infos
     */
    public static List<NepoInfo> collectNepoInfos(Phrase phrase) //
    {
        NepoInfoProcessor phraseVisitor = new NepoInfoProcessor(false, false);
        try {
            phraseVisitor.collect(phrase);
        } catch ( IllegalAccessException e ) {
            throw new DbcException("Cannot collect nepo infos", e);
        }
        return phraseVisitor.infos;
    }

    /**
     * collect the infos only of type error generated (and stored in the Phrases) during validation and typechecking for an AST
     *
     * @param phrase whose errors should be collected
     * @return list of collected errors
     */
    public static List<NepoInfo> collectNepoErrors(Phrase phrase) //
    {
        List<NepoInfo> errors = new ArrayList<>();
        for ( NepoInfo nepoInfo : collectNepoInfos(phrase) ) {
            if ( nepoInfo.getSeverity().equals(NepoInfo.Severity.ERROR) ) {
                errors.add(nepoInfo);
            }
        }
        return errors;
    }

    /**
     * process the infos generated (and stored in the Phrases) during validation and typechecking for an AST
     * - store them in the topmost phrase and<br>
     * - delete them in the lower-level phrase
     *
     * @param phrase whose infos should be processed
     * @return list of collected infos
     */
    public static List<NepoInfo> elevateNepoInfos(Phrase phrase) //
    {
        NepoInfoProcessor phraseVisitor = new NepoInfoProcessor(true, false);
        try {
            phraseVisitor.collect(phrase);
        } catch ( IllegalAccessException e ) {
            throw new DbcException("Cannot collect nepo infos", e);
        }
        for ( NepoInfo nepoInfo : phraseVisitor.infos ) {
            phrase.addNepoInfo(nepoInfo);
        }
        return phraseVisitor.infos;
    }

    /**
     * collect textly errors (generated and stored in the Phrases) during validation and typechecking for an AST
     *
     * @param phrase whose errors should be collected
     * @return list of collected textly errors as JSON objects
     */
    public static List<JSONObject> collectTextlyErrors(Phrase phrase) {
        NepoInfoProcessor phraseVisitor = new NepoInfoProcessor(false, true);
        try {
            phraseVisitor.collect(phrase);
        } catch ( IllegalAccessException e ) {
            throw new DbcException("Cannot collect textly errors", e);
        }
        return phraseVisitor.textlyErrors;
    }

    /**
     * collect infos generated by the typechecker by reflection. It traverses the AST by identifying all fields recursively, that are Phrases and extracts the
     * infos from them.
     *
     * @param object a phrase or an arbitrary object. Decide how to handle it.
     */
    private void collect(Object object) throws IllegalAccessException {
        if ( object != null ) {
            Class<?> clazz = object.getClass();
            if ( List.class.isAssignableFrom(clazz) ) {
                for ( Object item : (List) object ) {
                    collect(item);
                }
            } else if ( Phrase.class.isAssignableFrom(clazz) ) {
                Phrase phrase = (Phrase) object;
                TextRegion currentTextRegion = phrase.getProperty().getTextRegion();
                if ( currentTextRegion != null ) {
                    lastValidTextRegion = currentTextRegion;
                }

                for ( NepoInfo info : phrase.getInfos().getInfos() ) {
                    if ( collectTextlyErrors ) {
                        if ( info.getSeverity().equals(NepoInfo.Severity.ERROR) ) {
                            String customMessage = info.getMessage().replace(TYPECHECK_ERROR_KEY, "");
                            if ( lastValidTextRegion != null ) {
                                JSONObject errorObject = new JSONObject();
                                errorObject.put("line", lastValidTextRegion.getLineStart());
                                errorObject.put("charPositionInLine", lastValidTextRegion.getColStart());
                                errorObject.put("offendingSymbol", "");
                                errorObject.put("message", customMessage);
                                textlyErrors.add(errorObject);
                            }
                        }
                    } else {
                        infos.add(info);
                    }
                }
                if ( deleteOldInfo ) {
                    phrase.getInfos().clear();
                }
                for ( Field field : clazz.getFields() ) {
                    collect(field.get(phrase));
                }
            } else if ( IInfoCollectable.class.isAssignableFrom(clazz) ) {
                IInfoCollectable collectable = (IInfoCollectable) object;
                for ( Field field : clazz.getDeclaredFields() ) {
                    collect(field.get(collectable));
                }
            }
        }
    }
}
