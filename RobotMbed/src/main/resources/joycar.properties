# robot's default program location, if any (preinstalled)
# attention, please leave out the file extension, this will be automatically added during runtime, 
# see "robot.plugin.fileExtension.binary"
robot.factory.default = firmware/MicroBit
robot.plugin.compiler.resources.dir = RobotMbed/
robot.plugin.fileExtension.source = py
robot.plugin.fileExtension.binary = hex
# set the location to the directory containing arm-none-eabi-g++, if it is not accesable from the PATH (ex. /usr/bin/)
# robot.plugin.compiler.dir = /usr/bin/
# robot specific toolboxes, default program and configuration
robot.program.toolbox.beginner = /joyCar/program.toolbox.beginner.xml
robot.program.toolbox.expert = /joyCar/program.toolbox.expert.xml
robot.program.default = /joyCar/program.default.xml
robot.configuration.toolbox = /joyCar/configuration.toolbox.xml
robot.configuration.default = /joyCar/configuration.default.xml
# robot's long name to display
robot.real.name = micro:bit Joy-Car
robot.vendor = 0xd28
# robot's info for further information
robot.info.en = https://joy-it.net/en/products/mb-joy-car
robot.announcement = beta
robot.configuration = true
# either new or old-<sensorprefix> with <sensorprefix>="S" for all robots but mbot, which needs "P"
robot.configuration.type = new
# still necessary for backwards compatibility with old configurations
robot.configuration.old.toplevelblock = mbedBrick_microbit-Brick
# flag that compiled programs are send back to the client

robot.nn = selectable
robot.nn.activations = linear,relu,tanh,sigmoid,bool

robot.helperMethods = classpath:/joycar.methods.yml
robot.plugin.worker.validate.and.collect = de.fhg.iais.roberta.worker.validate.JoyCarValidatorAndCollectorWorker
robot.plugin.worker.generate = de.fhg.iais.roberta.worker.codegen.JoyCarPythonGeneratorWorker
robot.plugin.worker.setup = de.fhg.iais.roberta.worker.CompilerSetupWorker
robot.plugin.worker.compile = de.fhg.iais.roberta.worker.MicrobitV2CompilerWorker
robot.plugin.worker.resetFirmware = de.fhg.iais.roberta.worker.MbedResetFirmwareWorker
robot.plugin.worker.regenerateNepo = de.fhg.iais.roberta.worker.RegenerateNepoWorker

robot.plugin.workflow.showsource = validate.and.collect,generate,regenerateNepo
robot.plugin.workflow.compile = validate.and.collect,generate,setup,compile,regenerateNepo
robot.plugin.workflow.run = validate.and.collect,generate,setup,compile,regenerateNepo
robot.plugin.workflow.runnative = setup,compile
robot.plugin.workflow.compilenative = setup,compile
robot.plugin.workflow.reset = resetFirmware
robot.plugin.workflow.getsimulationcode = do.nothing

