// This file is automatically generated by the Open Roberta Lab.
#define _ARDUINO_STL_NOT_NEEDED
#include "SenseBoxMCU.h"
#undef max
#undef min
#include <NEPODefs.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Plot.h>
#include <stdlib.h>


std::list<double> ___values;
char* _temperature = "111111111111111111111112";
char* _pressure = "111111111111111111111113";
char* _humidity = "111111111111111111111114";
char* _temperature2 = "111111111111111111111115";
char* _uvlight = "111111111111111111111116";
char* _visiblelight = "111111111111111111111117";
BMP280 _bmp280_T;
VEML6070 _veml_V;
TSL45315 _tsl_V;
Bee* _bee_ = new Bee();
OpenSenseMap _osm("111111111111111111111111", _bee_);
HDC1080 _hdc1080_H;
#define OLED_RESET 4
Adafruit_SSD1306 _display_L(OLED_RESET);
Plot _plot_L(&_display_L);

void setup()
{
    Serial.begin(9600); 
    _bmp280_T.begin();
    _veml_V.begin();
    _tsl_V.begin();
    _bee_->connectToWifi("mySSID","myPassw0rd");
    delay(1000);
    _hdc1080_H.begin();
    senseBoxIO.powerI2C(true);
    delay(2000);
    _display_L.begin(SSD1306_SWITCHCAPVCC, 0x3D);
    _display_L.display();
    delay(100);
    _display_L.clearDisplay();
    ___values = {};
}

void loop()
{
    Serial.println(_hdc1080_H.getHumidity());
    Serial.println(_hdc1080_H.getTemperature());
    Serial.println(_bmp280_T.getTemperature());
    Serial.println(_bmp280_T.getPressure());
    Serial.println(_tsl_V.getIlluminance());
    Serial.println(_veml_V.getUvIntensity());
    ___values.push_back(_hdc1080_H.getHumidity());
    ___values.push_back(_hdc1080_H.getTemperature());
    ___values.push_back(_bmp280_T.getTemperature());
    ___values.push_back(_bmp280_T.getPressure());
    ___values.push_back(_tsl_V.getIlluminance());
    ___values.push_back(_veml_V.getUvIntensity());
    for ( double ___value : ___values ) {
        _display_L.setCursor(0, 0);
        _display_L.setTextSize(1);
        _display_L.setTextColor(WHITE, BLACK);
        _display_L.println(___value);
        _display_L.display();
        
        delay(250);
        delay(1);
    }
    _osm.uploadMeasurement(_getListElementByIndex(___values, 0), _temperature);
    _osm.uploadMeasurement(_getListElementByIndex(___values, 1), _temperature);
    _osm.uploadMeasurement(_getListElementByIndex(___values, 2), _temperature);
    _osm.uploadMeasurement(_getListElementByIndex(___values, 3), _temperature);
    _osm.uploadMeasurement(_getListElementByIndex(___values, 4), _temperature);
    _osm.uploadMeasurement(_getListElementByIndex(___values, 5), _temperature);
    
    ___values = {};
}
