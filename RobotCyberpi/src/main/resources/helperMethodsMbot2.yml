include: "classpath:/common.methods.yml"

## FunctionNames

DIFFDRIVEFOR:
  PYTHON: |
    def diffDriveFor(rpmL, rpmR, distance):
        timeToWait = getTimeToWait(rpmL, rpmR, distance)
        if distance < 0:
            rpmL = -rpmL
            rpmR = -rpmR
        if _diffPortsSwapped:
            mbot2.drive_speed(-rpmR, rpmL)
        else:
            mbot2.drive_speed(rpmL, -rpmR)
        time.sleep(timeToWait)
        mbot2.EM_stop()

    def getTimeToWait(rpmL, rpmR, distance):
        absoluteDistance = abs(distance)
        speedL = rpmL * _circumference / 60
        speedR = rpmR * _circumference / 60

        resultingSpeed = (speedL + speedR) / 2
        angVel = (speedR - speedL) / (_trackWidth)
        if angVel != 0 and resultingSpeed != 0:
            radius = resultingSpeed / angVel
            absoluteDistance = radius * math.sin(absoluteDistance/radius)
        if resultingSpeed != 0:
            return abs(absoluteDistance / resultingSpeed)
        else:
            return 0

RGBASSTRING:
  PYTHON: |
    def RGBAsString(rgb):
        r, g, b = rgb
        color_diffs = []
        for color in _colors:
            cr, cg, cb = _colors[color]
            color_diff = math.sqrt(abs(r - cr)**2 + abs(g - cg)**2 + abs(b - cb)**2)
            color_diffs.append((color_diff, color))
        return min(color_diffs)[1]

