/*
 * This is a class GENERATED by the TransportGenerator maven plugin. DON'T MODIFY IT.
 * IF you modify it, your work may be lost: the class will be overwritten automatically
 * when the maven plugin is re-executed for any reasons.
 */
package de.fhg.iais.roberta.generated.restEntities;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * the request description for the /userGroup/deleteGroupMembers and /userGroup/setUserGroupMembersDefaultPasswords REST request<br><br>
 * Version: 1<br>
 * Datum: 2020-06-15
 */
public class UserGroupMembersRequest extends BaseRequest {
    protected String groupName;
    protected List<String> groupMemberAccounts;
    
    /**
     * the request description for the /userGroup/deleteGroupMembers and /userGroup/setUserGroupMembersDefaultPasswords REST request
     */
    public static UserGroupMembersRequest make() {
        return new UserGroupMembersRequest();
    }
    
    /**
     * the request description for the /userGroup/deleteGroupMembers and /userGroup/setUserGroupMembersDefaultPasswords REST request
     */
    public static UserGroupMembersRequest makeFromString(String jsonS) {
        try {
            JSONObject jsonO = new JSONObject(jsonS);
            return make(jsonO);
        } catch (JSONException e) {
            throw new RuntimeException("JSON parse error when parsing: " + jsonS, e);
        }
    }
    
    /**
     * the request description for the /userGroup/deleteGroupMembers and /userGroup/setUserGroupMembersDefaultPasswords REST request
     */
    public static UserGroupMembersRequest makeFromProperties(String cmd,String groupName,List<String> groupMemberAccounts) {
        UserGroupMembersRequest entity = new UserGroupMembersRequest();
        entity.setCmd(cmd);
        entity.setGroupName(groupName);
        entity.setGroupMemberAccounts(groupMemberAccounts);
        entity.immutable();
        return entity;
    }
    
    /**
     * the request description for the /userGroup/deleteGroupMembers and /userGroup/setUserGroupMembersDefaultPasswords REST request
     */
    public static UserGroupMembersRequest make(JSONObject jsonO) {
        return make().merge(jsonO).immutable();
    }
    
    /**
     * merge the properties of a JSON-object into this bean. The bean must be "under construction".
     * The keys of the JSON-Object must be valid. The bean remains "under construction".<br>
     * Throws a runtime exception if inconsistencies are detected.
     */
    public UserGroupMembersRequest merge(JSONObject jsonO) {
        try {
            for (String key : JSONObject.getNames(jsonO)) {
                if ("_version".equals(key)) {
                } else if ("cmd".equals(key)) {
                    setCmd(jsonO.optString(key));
                } else if ("groupName".equals(key)) {
                    setGroupName(jsonO.getString(key));
                } else if ("groupMemberAccounts".equals(key)) {
                    JSONArray array = jsonO.optJSONArray(key);
                    if (array != null && array.length() > 0) {
                        for (int i = 0; i < array.length(); i++) {
                            addGroupMemberAccounts(array.getString(i));
                        }
                    } else {
                        setGroupMemberAccounts(new ArrayList<String>());
                    }
                } else {
                    throw new RuntimeException("JSON parse error. Found invalid key: " + key + " in " + jsonO);
                }
            }
            return this;
        } catch (Exception e) {
            throw new RuntimeException("JSON parse / casting error when parsing: " + jsonO, e);
        }
    }
    
    /**
     * moves a bean from state "under construction" to state "immutable".<br>
     * Checks whether all required fields are set. All lists are made immutable.<br>
     * Throws a runtime exception if inconsistencies are detected.
     */
    public UserGroupMembersRequest immutable() {
        if (this.immutable) {
            return this;
        }
        this.immutable = true;
        this.groupMemberAccounts = (this.groupMemberAccounts != null) ? Collections.unmodifiableList(this.groupMemberAccounts) : null;
        return validate();
    }
    
    /**
     * Checks whether all required fields are set.<br>
     * Throws a runtime exception if inconsistencies are detected.
     */
    private UserGroupMembersRequest validate() {
        String _message = null;
        if ( !this.immutable ) {
            _message = "UserGroupMembersRequest-object is already immutable: " + toString();
        }
        if ( groupName == null) {
            _message = "required property groupName of UserGroupMembersRequest-object is not set: " + toString();
        }
        if ( groupMemberAccounts == null) {
            _message = "required property groupMemberAccounts of UserGroupMembersRequest-object is not set: " + toString();
        }
        if ( _message != null ) {
            this.immutable = false;
            throw new RuntimeException(_message);
        }
        return this;
    }
    
    /**
     * GET groupName. Object must be immutable. Never return null or an undefined/default value.
     */
    public String getGroupName() {
        if (!this.immutable) {
            throw new RuntimeException("no groupName from an object under construction: " + toString());
        }
        return this.groupName;
    }
    
    /**
     * SET groupName. Object must be mutable.
     */
    public UserGroupMembersRequest setGroupName(String groupName) {
        if (this.immutable) {
            throw new RuntimeException("groupName assigned to an immutable object: " + toString());
        }
        this.groupName = groupName;
        return this;
    }
    
    /**
     * GET groupMemberAccounts. Object must be immutable. Never return null or an undefined/default value.
     */
    public List<String> getGroupMemberAccounts() {
        if (!this.immutable) {
            throw new RuntimeException("no groupMemberAccounts from an object under construction: " + toString());
        }
        return this.groupMemberAccounts;
    }
    
    /**
     * SET groupMemberAccounts. Object must be mutable.
     */
    public UserGroupMembersRequest setGroupMemberAccounts(List<String> groupMemberAccounts) {
        if (this.immutable) {
            throw new RuntimeException("groupMemberAccounts assigned to an immutable object: " + toString());
        }
        if ( this.groupMemberAccounts == null ) {
            this.groupMemberAccounts = new ArrayList<String>();
        }
        this.groupMemberAccounts.addAll(groupMemberAccounts);
        return this;
    }
    
    /**
     * ADD groupMemberAccounts. Object must be mutable.
     */
    public UserGroupMembersRequest addGroupMemberAccounts(String groupMemberAccounts) {
        if (this.immutable) {
            throw new RuntimeException("groupMemberAccounts assigned to an immutable object: " + toString());
        }
        if ( this.groupMemberAccounts == null ) {
            this.groupMemberAccounts = new ArrayList<String>();
        }
        this.groupMemberAccounts.add(groupMemberAccounts);
        return this;
    }
    
    /**
     * ADD ALL groupMemberAccounts. Object must be mutable.
     */
    public UserGroupMembersRequest addAllGroupMemberAccounts(List<String> groupMemberAccounts) {
        if (this.immutable) {
            throw new RuntimeException("groupMemberAccounts assigned to an immutable object: " + toString());
        }
        if ( this.groupMemberAccounts == null ) {
            this.groupMemberAccounts = new ArrayList<String>();
        }
        this.groupMemberAccounts.addAll(groupMemberAccounts);
        return this;
    }
    
    /**
     * generates a JSON-object from an immutable bean.<br>
     * Throws a runtime exception if inconsistencies are detected.
     */
    public JSONObject toJson() {
        if (!this.immutable) {
            throw new RuntimeException("no JSON from an object under construction: " + toString());
        }
        JSONObject jsonO = new JSONObject();
        try {
            jsonO.put("_version", "1");
            if (this.cmd != null) {
                jsonO.put("cmd", this.cmd);
            }
            jsonO.put("groupName", this.groupName);
            {
                JSONArray array = new JSONArray();
                for (String item : this.groupMemberAccounts) {
                    array.put(item);
                }
                jsonO.put("groupMemberAccounts", array);
            }
        } catch (JSONException e) {
            throw new RuntimeException("JSON unparse error when unparsing: " + this, e);
        }
        return jsonO;
    }
    
    @Override
    public String toString() {
        return "UserGroupMembersRequest [immutable=" + this.immutable + ", cmd=" + this.cmd + ", groupName=" + this.groupName + ", groupMemberAccounts=" + this.groupMemberAccounts + " ]";
    }
    @Override
    public int hashCode() {
        throw new RuntimeException("no hashCode from transport beans!");
    }
    
    @Override
    public boolean equals(Object obj) {
        throw new RuntimeException("no equals from transport beans!");
    }
    
}
